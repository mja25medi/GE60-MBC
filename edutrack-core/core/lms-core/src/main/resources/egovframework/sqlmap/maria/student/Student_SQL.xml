<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.edutrack.modules.student.student.service.impl.StudentMapper">
	<select id="selectKey" resultType="String">
		 SELECT CONCAT('EN',LPAD(nextval(SQ_STD_STD),10,'0')) AS crsCd 
	</select>
	
	<sql id="getListStudentQuery">
		 SELECT T.*																																		
		      FROM (																																		
		     SELECT A.STD_NO 																	
		          , A.CRS_CRE_CD 																
		          , A.DECLS_NO 																
		          , A.USER_NO 																	
		          , A.ENRL_STS 																
		          , A.ENRL_START_DTTM 															
		          , A.ENRL_END_DTTM 															
		          , A.AUDIT_END_DTTM 															
		          , A.ENRL_APLC_DTTM 															
		          , A.ENRL_CANCEL_DTTM 														
		          , A.ENRL_CERT_DTTM 															
		          , A.ENRL_CPLT_DTTM 															
		          , A.CERT_APLC_DTTM 															
		          , A.EDU_NO 																	
		          , A.CPLT_NO 
		          , A.CERT_STS
		          , (SELECT FN_GET_CODE_NAME('CERT_STS',A.CERT_STS)) as certStsNm	
		          , A.CERT_SCORE
		          , A.CERT_PASS_YN																	
		          , A.GET_CREDIT 																
		          , A.STAY_APLC_YN 															
		          , A.COMP_NM 																	
		          , A.BIZZ_NO 																	
		          , A.AREA_CD 																	
		          , A.ORG_CD 																	
		          , ( SELECT ORG_NM FROM tb_org_org_info 										
		               WHERE ORG_CD = A.ORG_CD) AS ORG_NM										
		          , A.EMP_NO 																	
		          , A.REG_NO 																	
		          , (SELECT FN_GET_USER_NAME(A.REG_NO) ) AS REG_NM 					
		          , A.REG_DTTM 																
		          , A.MOD_NO 																	
		          , (SELECT FN_GET_USER_NAME(A.MOD_NO) ) AS MOD_NM 					
		          , A.MOD_DTTM 																
		          , A.SCORE_ECLT_YN															
		          , B.USER_NM															
		          , B.BIRTH															
		          , B.USER_NM_GANA															
	              , B.USER_NM_ENG															
	              , B.SEX_CD															
	              , B.AREA_CD AS USER_AREA_CD															
	              , B.USER_DIV_CD															
	              , B.EMAIL															
	              , B.DEPT_CD															
	              , (SELECT DEPT.DEPT_NM FROM tb_usr_dept_info DEPT WHERE DEPT.ORG_CD = B.ORG_CD AND DEPT.DEPT_CD = B.DEPT_CD) AS DEPT_NM	
	              , B.MOBILE_NO															
	              , B.HOME_PHONENO															
	              , B.COMP_FAX_NO															
	              , B.COMP_PHONENO															
	              , B.ETC_PHONENO															
	              , B.COMP_ADDR_1															
	              , B.HOME_ADDR_1															
	              , B.DISABLILITY_YN															
	              , B.INTEREST_FIELD_CD															
	              , (SELECT CMNT.CMNT_CTS FROM tb_usr_user_cmnt CMNT WHERE CMNT.USER_NO = B.USER_NO) AS MEMO   	
		          , C.USER_ID																	
		          , (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO) ) AS TOT_RATIO			
		          , IFNULL(FN_GET_NULL_SCORE(( SELECT TOT_SCORE FROM tb_std_edu_rslt							
		                   WHERE STD_NO = A.STD_NO )), 0) AS TOT_SCORE							
		       FROM tb_std_std A, tb_usr_user_info B, tb_usr_login C							
		      	WHERE A.CRS_CRE_CD = IFNULL(FN_GET_NULL(#{crsCreCd}), A.CRS_CRE_CD)								
		        AND A.USER_NO = B.USER_NO														
		        AND B.USER_NO = C.USER_NO														
		        AND C.USER_STS = 'U'															
		        AND IFNULL(FN_GET_NULL((CASE WHEN #{dateSearchType} = 'CPLT' THEN A.ENRL_CPLT_DTTM ELSE A.ENRL_APLC_DTTM END)), A.REG_DTTM)								
		        AND IFNULL(FN_GET_NULL(#{enrlSts}), '|E|S|N|C|F|') like CONCAT('%',A.ENRL_STS,'%')	
		<if test = "startDate != null and startDate != ''">       
		        BETWEEN (CASE WHEN #{startDate} = null THEN '19900101000001' WHEN #{startDate} = '' THEN '19900101000001' ELSE CONCAT(REPLACE(#{startDate},'.','') ,'000001') END)	
		</if>    
		<if test = "endDate != null and endDate != ''">       
		        AND  (CASE WHEN #{endDate} = null THEN '99991231235959' WHEN #{endDate} = '' THEN '99991231235959' ELSE CONCAT(REPLACE(#{endDate},'.',''),'235959') END)	
		</if>      			
		<if test = "declsNo != null and declsNo != ''">
			  	AND A.DECLS_NO = (CASE WHEN #{declsNo} = null THEN A.DECLS_NO WHEN #{declsNo} = 0 THEN A.DECLS_NO ELSE #{declsNo} END)				
		</if>
		<if test = "userNm != null and userNm != ''">
		  	AND CONCAT(B.USER_NM, C.USER_ID) like CONCAT('%', IFNULL(#{userNm}, ''),'%')
		</if>
		<if test = "orgCd != null and orgCd != ''">
		   	AND B.ORG_CD = #{orgCd}														
		</if>
		<if test = "certPassYn != null and certPassYn != ''">
		   	AND A.CERT_PASS_YN = #{certPassYn}														
		</if>
		<if test = "certSts != null and certSts != ''">
		   	AND A.CERT_STS = #{certSts}														
		</if>
 		<if test = "creOperTypeCd != null and creOperTypeCd != ''">
			<if test = "creOperTypeCd == 'E'">
			   	AND (SELECT CRE_OPER_TYPE_CD FROM tb_crs_cre_crs where CRS_CRE_CD = IFNULL(FN_GET_NULL(#{crsCreCd}), A.CRS_CRE_CD)) = 'E'													
			</if>
		</if> 
		<if test = "paymNo != null and paymNo != ''">
		   	AND A.PAYM_NO = #{paymNo}														
		</if>
		<if test = "searchValue != null and searchValue != ''">
			AND  B.USER_NM like CONCAT('%',#{searchValue},'%')
		</if>
		 ) T
	</sql>
	
	<sql id="getStudentMergeQuery">
	 		MERGE  INTO tb_std_std STD															
		 		USING  (																			
		 				SELECT C.CRS_CRE_CD, C.USER_NO												
		 				  FROM (SELECT #{crsCreCd} as CRS_CRE_CD, #{userNo} as USER_NO  ) C	
		 			    ) S																			
		 		   ON  (																			
		 				S.CRS_CRE_CD 	= STD.CRS_CRE_CD											
		 				AND S.USER_NO 	= STD.USER_NO												
		 			   )																			
		 		 WHEN  MATCHED THEN																	
		 	   UPDATE																				
		 		  SET  STD.ENRL_STS 		= #{enrlSts}												
		 	   		,  STD.STAY_APLC_YN 	= #{stayAplcYn}											
		 	   		,  STD.STAY_APLC_YN_2 	= #{stayAplcYn2	}										
		      		,  STD.MOD_NO 			= #{regNo}												
		      		,  STD.MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')				
		 		WHERE  '|N|D|' like CONCAT('%',STD.ENRL_STS,'%')										
		 		 WHEN  NOT MATCHED THEN																
		 	   INSERT  (																			
		        	   STD_NO																		
		      		,  CRS_CRE_CD																	
		      		,  USER_NO																		
		      		,  ENRL_STS																		
		     		,  ENRL_START_DTTM																
		      		,  ENRL_END_DTTM																
		     		,  AUDIT_END_DTTM																
					,  ENRL_APLC_DTTM																
					,  ENRL_CANCEL_DTTM																
					,  ENRL_CERT_DTTM																
					,  ENRL_CPLT_DTTM																
					,  EDU_NO																		
					,  CPLT_NO																		
					,  GET_CREDIT																	
					,  TRAINING_NOMI_NO																
					,  STAY_APLC_YN																	
					,  STAY_APLC_YN_2																
					,  REG_NO																		
					,  REG_DTTM																		
				) VALUES (																			
		        	   #{stdNo}																		
					,  #{crsCreCd}																	
					,  #{userNo	}																	
					,  #{enrlSts}																		
					,  #{enrlStartDttm}																
					,  #{enrlEndDttm}																	
					,  IFNULL(FN_GET_NULL(#{auditEndDttm}), #{enrlEndDttm})												
					,  IFNULL(FN_GET_NULL(#{enrlAplcDttm}), DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'))					
					,  #{enrlCancelDttm}																
					,  #{enrlCertDttm}																
					,  #{enrlCpltDttm}																
					,  #{eduNo	}																	
					,  #{cpltNo	}																	
					,  #{getCredit	}																
					,  #{trainingNomiNo	}															
					,  #{stayAplcYn}																	
					,  #{stayAplcYn2}																	
					,  #{regNo}																		
					, DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')									
				) 					
	</sql>
	
	<sql id="getUpdateStudentQuery">
		  UPDATE tb_std_std										
		     SET DECLS_NO = #{declsNo} 								
		       , USER_NO = #{userNo} 								
		       , ENRL_STS = #{enrlSts} 								
		       , ENRL_START_DTTM = #{enrlStartDttm} 					
		       , ENRL_END_DTTM = #{enrlEndDttm} 						
		       , AUDIT_END_DTTM = IFNULL(FN_GET_NULL(#{auditEndDttm}), #{enrlEndDttm})
		       , ENRL_APLC_DTTM = #{enrlAplcDttm }					
		       , ENRL_CANCEL_DTTM = #{enrlCancelDttm} 				
		       , ENRL_CERT_DTTM = #{enrlCertDttm} 					
		       , ENRL_CPLT_DTTM = #{enrlCpltDttm} 					
		       , EDU_NO = #{eduNo} 									
		       , CPLT_NO = #{cpltNo} 								
		       , GET_CREDIT = #{getCredit} 							
		       , STAY_APLC_YN = #{stayAplcYn} 						
		       , PAYM_NO = #{paymNo}									
		       , COMP_NM = #{compNm} 								
		       , BIZZ_NO = #{bizzNo} 								
		       , DEPT_NM = #{deptNm} 								
		       , AREA_CD = #{areaCd} 								
		       , ORG_CD = #{orgCd} 									
		       , EMP_NO = #{empNo} 									
		       , MOD_NO = #{modNo} 									
		       , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		   WHERE STD_NO = #{stdNo} 									
	</sql>
	
	<sql id="getConfirmStudentSQuery">
	<!-- 상시과정 수강 승인용 쿼리 -->
	<![CDATA[ 	
		 	UPDATE 	tb_std_std 																	
		      SET	ENRL_STS 			= #{enrlSts}			 									
		        ,  ENRL_START_DTTM 	= CONCAT(DATE_FORMAT(NOW(), '%Y%m%d'),'000001')					
		        ,  ENRL_END_DTTM 		= CONCAT(DATE_FORMAT(NOW() + #{enrlDaycnt}, '%Y%m%d'),'235959'	)
		        ,  AUDIT_END_DTTM 		= CONCAT(DATE_FORMAT(NOW() + #{enrlDaycnt}, '%Y%m%d'),'235959'	)
		        ,  ENRL_CERT_DTTM		= DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')					
		        ,  ENRL_CANCEL_DTTM 	= ''													
		        ,  MOD_NO 				= #{modNo}												
		        ,  MOD_DTTM 			= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	        
		        			
		  	WHERE  STD_NO 				= #{stdNo}												
		   AND (																
		       SELECT                                              			
		         count(std_no) AS cnt                              			
		       FROM tb_std_std a,                                  			
		         (SELECT                                           			
		           user_no                                         			
		           ,crs_cre_cd                                     			
		           ,decls_no                                       			
		           ,enrl_sts                                       			
		         FROM tb_std_std                                   			
		         WHERE std_no = #{stdNo}		                     				
		         ) b                                               			
		       WHERE a.crs_cre_cd = b.crs_cre_cd                   			
		       AND a.user_no = b.user_no                           			
		       AND a.enrl_sts = 'S'                                			
		       ) < 1 
	]]>                                              			
	</sql>

	<sql id="getConfirmStudentRQuery">
		<![CDATA[ 	
		 	UPDATE 	tb_std_std 													
		      SET	ENRL_STS 		= #{enrlSts}			 						
		        ,  ENRL_START_DTTM = #{enrlStartDttm}							
		        ,  ENRL_END_DTTM 	= #{enrlEndDttm}								
		        ,  AUDIT_END_DTTM 	= #{enrlEndDttm}								
		        ,  ENRL_CERT_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		        ,  MOD_NO 			= #{modNo}									
		        , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		  	 WHERE  STD_NO 			= #{stdNo}									
		   AND (																
		       SELECT                                              			
		         count(std_no) AS cnt                              			
		       FROM tb_std_std a,                                  			
		         (SELECT                                           			
		           user_no                                         			
		           ,crs_cre_cd                                     			
		           ,decls_no                                       			
		           ,enrl_sts                                       			
		         FROM tb_std_std                                   			
		         WHERE std_no = #{stdNo}		                     				
		         ) b                                               			
		       WHERE a.crs_cre_cd = b.crs_cre_cd                   			
		       AND a.user_no = b.user_no                           			
		       AND a.enrl_sts = 'S'                                			
		       ) < 1  
		 ]]>                                             			
	</sql>
	
	<select id="listStudent" parameterType="studentVO" resultType="studentVO">
		<include refid="getListStudentQuery" />
		<choose>
		<when test = "sortKey != null and sortKey == 'EDU_NO_ASC'">
			 ORDER BY EDU_NO ASC
		</when>
		<when test = "sortKey != null and sortKey == 'EDU_NO_DESC'">
			 ORDER BY EDU_NO DESC
		</when>
		<when test = "sortKey != null and sortKey == 'DECLS_NO_ASC'">
			 ORDER BY DECLS_NO ASC
		</when>
		<when test = "sortKey != null and sortKey == 'DECLS_NO_DESC'">
			 ORDER BY DECLS_NO DESC
		</when>
		<when test = "sortKey != null and sortKey == 'USER_NM_ASC'">
			 ORDER BY USER_NM ASC	
		</when>
		<when test = "sortKey != null and sortKey == 'USER_NM_DESC'">
			 ORDER BY USER_NM DESC
		</when>
		<when test = "sortKey != null and sortKey == 'USER_ID_ASC'">
			 ORDER BY USER_ID ASC		
		</when>
		<when test = "sortKey != null and sortKey == 'USER_ID_DESC'">
			 ORDER BY USER_ID DESC
		</when>
		<when test = "sortKey != null and sortKey == 'COMP_NM_ASC'">
			   ORDER BY COMP_NM ASC	
		</when>
		<when test = "sortKey != null and sortKey == 'COMP_NM_DESC'">
			 ORDER BY COMP_NM DESC
		</when>
		<when test = "sortKey != null and sortKey == 'ENRL_APLC_DTTM_ASC'">
			  ORDER BY ENRL_APLC_DTTM ASC
		</when>
		<when test = "sortKey != null and sortKey == 'ENRL_APLC_DTTM_DESC'">
			   ORDER BY ENRL_APLC_DTTM DESC	
		</when>
		<otherwise>
			ORDER BY 
				(CASE WHEN #{sort1} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort1} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort1} = 'USER_NM'  THEN USER_NM
							WHEN #{sort1} = 'EDU_NO'   THEN LPAD(EDU_NO,4,'0')
							WHEN #{sort1} = 'ENRL_STS' THEN ENRL_STS
							ELSE LPAD(DECLS_NO,4,'0')
							END) ASC	
				, (CASE WHEN #{sort2} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort2} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort2} = 'USER_NM'  THEN USER_NM
							ELSE LPAD(EDU_NO,3,'0')
							END) ASC		
				, (CASE WHEN #{sort3} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort3} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort3} = 'USER_NM'  THEN USER_NM
							ELSE DATE_FORMAT(('99991231235959' - ENRL_APLC_DTTM), '%Y%m%d%H%i%s')
							END) ASC					    
		                 								
		</otherwise>
	</choose>
	</select>
	
	<!-- 
	<if test = "searchValue != null and searchValue != ''">
	</if> 
	<choose>
		<when test = "sortKey != null and sortKey == 'CARTRG_NM_ASC'">
			 
		</when>
		<otherwise>
			
		</otherwise>
	</choose>
	-->
	<select id="count"  parameterType="studentVO" resultType="Integer">
		<!--   -->
		SELECT COUNT(*) FROM (
			<include refid="getListStudentQuery" />
		) SB
	</select>
	
	<select id="listStudentPageing"  parameterType="studentVO" resultType="studentVO">
		<!--   -->
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix"/>
			<include refid="getListStudentQuery" />
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
		<choose>
		<when test = "sortKey != null and sortKey == 'EDU_NO_ASC'">
			 ORDER BY EDU_NO ASC
		</when>
		<when test = "sortKey != null and sortKey == 'EDU_NO_DESC'">
			 ORDER BY EDU_NO DESC
		</when>
		<when test = "sortKey != null and sortKey == 'DECLS_NO_ASC'">
			 ORDER BY DECLS_NO ASC
		</when>
		<when test = "sortKey != null and sortKey == 'DECLS_NO_DESC'">
			 ORDER BY DECLS_NO DESC
		</when>
		<when test = "sortKey != null and sortKey == 'USER_NM_ASC'">
			 ORDER BY USER_NM ASC	
		</when>
		<when test = "sortKey != null and sortKey == 'USER_NM_DESC'">
			 ORDER BY USER_NM DESC
		</when>
		<when test = "sortKey != null and sortKey == 'USER_ID_ASC'">
			 ORDER BY USER_ID ASC		
		</when>
		<when test = "sortKey != null and sortKey == 'USER_ID_DESC'">
			 ORDER BY USER_ID DESC
		</when>
		<when test = "sortKey != null and sortKey == 'COMP_NM_ASC'">
			   ORDER BY COMP_NM ASC	
		</when>
		<when test = "sortKey != null and sortKey == 'COMP_NM_DESC'">
			 ORDER BY COMP_NM DESC
		</when>
		<when test = "sortKey != null and sortKey == 'ENRL_APLC_DTTM_ASC'">
			  ORDER BY ENRL_APLC_DTTM ASC
		</when>
		<when test = "sortKey != null and sortKey == 'ENRL_APLC_DTTM_DESC'">
			   ORDER BY ENRL_APLC_DTTM DESC	
		</when>
		<otherwise>
			ORDER BY 
				(CASE WHEN #{sort1} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort1} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort1} = 'USER_NM'  THEN USER_NM
							WHEN #{sort1} = 'EDU_NO'   THEN LPAD(EDU_NO,4,'0')
							WHEN #{sort1} = 'ENRL_STS' THEN ENRL_STS
							ELSE LPAD(DECLS_NO,4,'0')
							END) ASC	
				, (CASE WHEN #{sort2} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort2} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort2} = 'USER_NM'  THEN USER_NM
							ELSE LPAD(EDU_NO,3,'0')
							END) ASC		
				, (CASE WHEN #{sort3} = 'DECLS_NO' THEN LPAD(DECLS_NO,3,'0')
							WHEN #{sort3} = 'ORG_NM'   THEN ORG_NM
							WHEN #{sort3} = 'USER_NM'  THEN USER_NM
							ELSE DATE_FORMAT(('99991231235959' - ENRL_APLC_DTTM), '%Y%m%d%H%i%s')
							END) ASC					    
		                 								
		</otherwise>
	</choose>		
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix"/>
			
	</select>
	
	<select id="selectStudent" parameterType="studentVO" resultType="studentVO">
		  SELECT A.STD_NO 																		
		          , A.CRS_CRE_CD 																
		          , A.DECLS_NO 																
		          , A.USER_NO 																	
		          , A.ENRL_STS 																
		          , A.ENRL_START_DTTM 															
		          , A.ENRL_END_DTTM 															
		          , A.AUDIT_END_DTTM 															
		          , A.ENRL_APLC_DTTM 															
		          , A.ENRL_CANCEL_DTTM 														
		          , A.ENRL_CERT_DTTM 															
		          , A.ENRL_CPLT_DTTM 															
		          , A.CERT_APLC_DTTM 															
		          , A.EDU_NO 																	
		          , A.CPLT_NO 																	
		          , A.CERT_STS															
		          , A.CERT_SCORE 																	
		          , A.CERT_PASS_YN 																	
		          , A.GET_CREDIT 																
		          , A.STAY_APLC_YN 															
		          , A.COMP_NM 																	
		          , A.BIZZ_NO 																	
		          , A.DEPT_NM 																	
		          , A.AREA_CD 																	
		          , A.ORG_CD 																	
		          , ( SELECT ORG_NM FROM tb_org_org_info 										
		               WHERE ORG_CD = A.ORG_CD) AS ORG_NM										
		          , A.EMP_NO 	
		          , A.PAYM_NO
				  , A.REPAY_PRICE
				  , A.REPAY_MTHD_CD
				  , A.REPAY_STS_CD
				  , A.REPAY_REQ_DTTM
				  , A.REPAY_DTTM
				  , A.REPAY_BANK_NM
				  , A.REPAY_USER_NM
				  , A.REPAY_ACNT_NO
				  , A.REPAY_REASON
				  , A.REPAY_MEMO
				  , A.REPAY_RSLT_CD	
		          , A.STD_PRICE															
		          , A.REG_NO 																	
		          , (SELECT FN_GET_USER_NAME(A.REG_NO) ) AS REG_NM 					
		          , A.REG_DTTM 																
		          , A.MOD_NO 																	
		          , (SELECT FN_GET_USER_NAME(A.MOD_NO) ) AS MOD_NM 					
		          , A.MOD_DTTM 																
		          , B.USER_NM	 																
		          , B.EMAIL	 																
		          , B.HOME_PHONENO																
		          , B.MOBILE_NO			
		          , B.BIRTH 													
		          , C.USER_ID																	
		          , IFNULL(FN_GET_NULL_SCORE(( SELECT TOT_SCORE FROM tb_std_edu_rslt				
		                   WHERE STD_NO = A.STD_NO )), 0) AS TOT_SCORE							
		          , A.PAYM_NO																	
		       FROM tb_std_std A, tb_usr_user_info B, tb_usr_login C							
		       WHERE A.CRS_CRE_CD = IFNULL(FN_GET_NULL(#{crsCreCd}), A.CRS_CRE_CD)
		        AND A.USER_NO = B.USER_NO														
		        AND B.USER_NO = C.USER_NO														
		        AND A.STD_NO =  #{stdNo}															
	</select>
	
	<select id="selectStudentInfo" parameterType="studentVO" resultType="studentVO">
		   SELECT A.STD_NO 
		        , A.CRS_CRE_CD 
		        , A.USER_NO 
		        , B.USER_NM 
		        , ( SELECT USER_ID 
		              FROM tb_usr_login 
		             WHERE USER_NO = A.USER_NO) AS USER_ID 
		        , A.ENRL_STS 
		        , A.ENRL_START_DTTM 
		        , A.ENRL_END_DTTM 
		        , CONCAT(DATE_FORMAT(STR_TO_DATE(A.ENRL_START_DTTM,'%Y%m%d%H%i%s'),'%m.%d'),'~',DATE_FORMAT(STR_TO_DATE(A.ENRL_END_DTTM,'%Y%m%d%H%i%s'),'%m.%d')) AS ENRL_DURATION
		        , A.ENRL_APLC_DTTM 
		        , A.ENRL_CANCEL_DTTM 
		        , A.ENRL_CERT_DTTM 
		        , A.ENRL_CPLT_DTTM 
		        , A.CERT_APLC_DTTM
		        , A.EDU_NO 
		        , A.CPLT_NO 
		        , A.CERT_STS 
		        , A.CERT_SCORE
		        , A.CERT_PASS_YN
		        , A.CERT_FAIL_REASON
		        , A.GET_CREDIT 
		        , A.REG_NO 
			    , (SELECT FN_GET_USER_NAME(A.REG_NO) ) AS REG_NM 
		        , A.REG_DTTM 
		        , A.MOD_NO 
			    , (SELECT FN_GET_USER_NAME(A.MOD_NO) ) AS MOD_NM 
		        , A.MOD_DTTM 
		        , (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO) ) AS PRGR_RATIO 
		        , ROUND((SELECT FN_GET_CRS_STD_BMKTIME(A.CRS_CRE_CD, A.STD_NO) )/60) AS PRGR_TIME
		        , A.IDE_URL 
		     FROM tb_std_std A, tb_usr_user_info B 
		    WHERE A.USER_NO = B.USER_NO 
		      AND A.STD_NO = #{stdNo} 
	</select>

	<select id="listUser" parameterType="studentVO" resultType="studentVO">
		      SELECT  B.USER_NO 												
	 	           ,  B.USER_NM												
		           ,  C.USER_ID												
		           ,  B.EMAIL													
		           ,  B.HOME_PHONENO											
		           ,  B.MOBILE_NO												
		           ,  B.ORG_CD													
		           ,  ( SELECT ORG_NM FROM tb_org_org_info						
		                 WHERE ORG_CD = B.ORG_CD) AS ORG_NM					
		        FROM  tb_usr_user_info B, tb_usr_login C						
		       WHERE  B.USER_NO = C.USER_NO									
		         AND  (CASE WHEN IFNULL(#{searchKey},'') = 'userNm' THEN B.USER_NM 			
		   		   				  WHEN IFNULL(#{searchKey},'') = 'userId' THEN C.USER_ID
		   		   				  ELSE B.USER_NM END)  like CONCAT('%', IFNULL(#{userNm}, ''),'%')		   		 
		         AND  IFNULL(FN_GET_NULL(C.USER_STS),'D') = 'U'		
		<if test = "orgCd != null and orgCd != ''">
		 AND  B.ORG_CD = #{orgCd}									
		      AND  B.USER_NO NOT IN ( SELECT USER_NO						
		                                   FROM tb_std_std						
		                                  WHERE CRS_CRE_CD = #{crsCreCd}			
		                                    AND ENRL_STS NOT IN ('N','D') )	
		     	 ORDER  BY B.USER_NM							
		</if>
	</select>	
	

	<update id="insertStudentSp" statementType="CALLABLE" parameterType="studentVO">
		{ call SP_INSERT_STUDENT( #{crsCreCd}, #{userNo}, #{enrlSts}, #{stayAplcYn}, #{paymMthdCd}, #{paymPrice}, #{paymStsCd}, #{paymDttm}, #{paymNo}, #{ueinsAplcYn}, #{ueinsAplyYn}, #{refundPrice}, #{docReceiptYn}, #{docReceiptNo}, #{receiptDt}, #{receiptUserNm}, #{certScore}, #{certPassYn}, #{regNo}, #{errcode} ) }		
	</update>
	
	<update id="updateBatch" parameterType="list">
	<!--   -->
	<!--   -->
		<foreach collection="list" item="item" index="index" open="DECLARE BEGIN" close="; END;" separator=";">
		</foreach>
	</update>
	

	
	<update id="updateEnrlDuration" parameterType="studentVO">
			UPDATE 	tb_std_std
		      SET	ENRL_START_DTTM = #{enrlStartDttm}						
		        ,  ENRL_END_DTTM 	= #{enrlEndDttm}							
		        ,  AUDIT_END_DTTM 	= #{auditEndDttm}							
		        ,  MOD_NO			= #{modNo}								
		        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		    WHERE  CRS_CRE_CD 		= #{crsCreCd}								
		      AND  ENRL_STS in ('S','C','F')								
	</update>

	
	<update id="updateDecls" parameterType="studentVO">
		 	UPDATE 	tb_std_std									
		       SET	DECLS_NO = #{declsNo}					
		    WHERE  STD_NO 	 = #{stdNo}							
	</update>
	
	<update id="updateScoreEclt" parameterType="studentVO">
		 	UPDATE 	tb_std_std									
		      SET	SCORE_ECLT_YN = #{scoreEcltYn}				
		    WHERE  STD_NO 	 = #{stdNo}							
	</update>
	
	<update id="getConfirmDepositStudentQuery" parameterType="studentVO">
		<!-- <![CDATA[ 
		 	UPDATE 	tb_std_std 												
		      SET	PAYM_PRICE 		= #{paymPrice}							
		        ,  PAYM_STS_CD     = #{paymStsCd}							
		        ,  PAYM_DTTM 	    = #{paymDttm}								
		        ,  MOD_NO 			= #{modNo}								
		        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE  STD_NO 			= #{stdNo}								
		  	   and  ENRL_STS <> 'N'											
		  	   and  PAYM_MTHD_CD IN ('PAYM003', 'PAYM004')					
		  	   and  IFNULL(FN_GET_NULL(PAYM_STS_CD),'N') != 'Y'
		 ]]> -->							
	</update>
	
	<select id="selectCrsRatio" parameterType="studentVO" resultType="studentVO">
		  SELECT FN_GET_CRS_AVG_PRGR(#{crsCreCd}) AS CRS_RATIO   
	</select>
	

	<select id="getCompleteNo" parameterType="studentVO" resultType="studentVO">
		  SELECT LPAD(MAX(IFNULL(FN_GET_NULL(SUBSTR(CPLT_NO,-3)),0))+1,3,'0') AS CPLT_NO
		    FROM tb_std_std  
		   WHERE CRS_CRE_CD = #{crsCreCd}  
	</select>
	
	<update id="completeSuccess" parameterType="studentVO">
		  UPDATE tb_std_std  
		     SET ENRL_STS = 'C'  
		       , CPLT_NO = #{cpltNo}  
		       , ENRL_CPLT_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		       , MOD_NO = #{modNo}  
		   	   , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		   WHERE STD_NO = #{stdNo}  
	</update>
	
	<update id="completeFailed" parameterType="studentVO">
		  UPDATE tb_std_std  
		     SET ENRL_STS = 'F'  
		       , CPLT_NO = ''  
		       , ENRL_CPLT_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		       , MOD_NO = #{modNo}  
		       , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		   WHERE STD_NO = #{stdNo}  
	</update>
	
	
	<insert id="insertStudent">
		  INSERT INTO tb_std_std  (										
		         STD_NO 													
		       , CRS_CRE_CD 												
		       , DECLS_NO 													
		       , USER_NO 													
		       , ENRL_STS 													
		       , ENRL_START_DTTM 											
		       , ENRL_END_DTTM 											
		       , AUDIT_END_DTTM 											
		       , ENRL_APLC_DTTM 											
		       , ENRL_CANCEL_DTTM 											
		       , ENRL_CERT_DTTM 											
		       , ENRL_CPLT_DTTM 
		       , CERT_APLC_DTTM										
		       , EDU_NO 													
		       , CPLT_NO
		       , CERT_STS
		       , CERT_SCORE
		       , CERT_PASS_YN								
		       , GET_CREDIT 												
		       , STAY_APLC_YN 												
		       , PAYM_NO													
		       , COMP_NM 													
		       , BIZZ_NO 													
		       , DEPT_NM 													
		       , AREA_CD 													
		       , ORG_CD 	
		       , STD_PRICE												
		       , EMP_NO 													
		       , REG_NO 													
		       , REG_DTTM 													
		       , MOD_NO 													
		       , MOD_DTTM 													
		 ) VALUES (														
		         #{stdNo} 													
		       , #{crsCreCd }												
		       , #{declsNo} 													
		       , #{userNo} 													
		       , #{enrlSts} 													
		       , #{enrlStartDttm} 											
		       , #{enrlEndDttm} 												
		       , IFNULL(FN_GET_NULL(#{auditEndDttm}), #{enrlEndDttm})							
		       , IFNULL(FN_GET_NULL(#{enrlAplcDttm}), DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'))			       
		       , #{enrlCancelDttm} 											
		       , #{enrlCertDttm} 											
		       , #{enrlCpltDttm} 											
		       , #{certAplcDttm} 											
		       , #{eduNo} 													
		       , #{cpltNo} 													
		       , #{certSts} 													
		       , #{certScore} 													
		       , #{certPassYn} 													
		       , #{getCredit} 												
		       , #{stayAplcYn} 												
		       , #{paymNo}													
		       , #{compNm }													
		       , #{bizzNo} 													
		       , #{deptNm} 													
		       , #{areaCd} 													
		       , #{orgCd} 													
		       , #{stdPrice}								
		       , #{empNo} 					
		       , #{regNo} 													
		       , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')						
		       , #{modNo} 													
		       , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')			
		 ) 	
	</insert>


	<update id="addMergeStudent">
		<include refid="getStudentMergeQuery" />
	</update>
	
	
	<update id="insertStudentBatch" parameterType="list">
	<!--  수강생 일괄등록 -->
		  INSERT INTO tb_std_std  (										
		         STD_NO 													
		       , CRS_CRE_CD 												
		       , DECLS_NO 													
		       , USER_NO 													
		       , ENRL_STS 													
		       , ENRL_START_DTTM 											
		       , ENRL_END_DTTM 											
		       , AUDIT_END_DTTM 											
		       , ENRL_APLC_DTTM 											
		       , ENRL_CANCEL_DTTM 											
		       , ENRL_CERT_DTTM 											
		       , ENRL_CPLT_DTTM 											
		       , CERT_APLC_DTTM 											
		       , EDU_NO 													
		       , CPLT_NO 													
		       , CERT_STS 													
		       , CERT_SCORE 													
		       , CERT_PASS_YN 													
		       , GET_CREDIT 												
		       , STAY_APLC_YN 												
		       , PAYM_NO													
		       , COMP_NM 													
		       , BIZZ_NO 													
		       , DEPT_NM 													
		       , AREA_CD 													
		       , ORG_CD 													
		       , EMP_NO 													
		       , REG_NO 													
		       , REG_DTTM 													
		       , MOD_NO 													
		       , MOD_DTTM 													
		 ) VALUES 
		 <foreach collection="list" item="item" index="index" separator=",">
		 (														
		         #{item.stdNo} 													
		       , #{item.crsCreCd }												
		       , #{item.declsNo} 													
		       , #{item.userNo} 													
		       , #{item.enrlSts} 													
		       , #{item.enrlStartDttm} 											
		       , #{item.enrlEndDttm} 												
		       , IFNULL(FN_GET_NULL(#{item.auditEndDttm}), #{item.enrlEndDttm})							
		       , IFNULL(FN_GET_NULL(#{item.enrlAplcDttm}), DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'))			       
		       , #{item.enrlCancelDttm} 											
		       , #{item.enrlCertDttm} 											
		       , #{item.enrlCpltDttm} 											
		       , #{item.certAplcDttm} 											
		       , #{item.eduNo} 													
		       , #{item.cpltNo} 													
		       , #{item.certSts} 													
		       , #{item.certScore} 													
		       , #{item.certPassYn} 													
		       , #{item.getCredit} 												
		       , #{item.stayAplcYn} 												
		       , #{item.paymNo}													
		       , #{item.compNm }													
		       , #{item.bizzNo} 													
		       , #{item.deptNm} 													
		       , #{item.areaCd} 													
		       , #{item.orgCd} 													
		       , #{item.empNo} 													
		       , #{item.regNo} 													
		       , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')						
		       , #{item.modNo} 													
		       , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')			
		 ) 	
		</foreach>
	</update>

	<update id="updateStudent">
	<!--  수강 신청 정보 수정 -->
		<include refid="getUpdateStudentQuery" />
	</update>
	
	<update id="updateStudentIde">
	<!--  수강 신청 정보 수정 -->
		UPDATE tb_std_std										
	     SET IDE_URL = #{ideUrl} 		
	     	 , MOD_NO = #{modNo} 									
		     , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')						
	     WHERE STD_NO = #{stdNo} 
	     		
	</update>
	
	<update id="confirmStudentBatch" parameterType="java.util.Map">
		<!-- 수강 신청 일괄 인증 -->
		<choose>
		<when test = "crsOperType == 'R'">
			 <foreach collection="list" item="item" index="index" open="DECLARE BEGIN" close="; END;" separator=";">
			 <![CDATA[ 
				 UPDATE 	tb_std_std 													
			     SET
			      	   ENRL_STS 		= #{item.enrlSts}			 						
			        ,  ENRL_START_DTTM = #{item.enrlStartDttm}							
			        ,  ENRL_END_DTTM 	= #{item.enrlEndDttm}								
			        ,  AUDIT_END_DTTM 	= #{item.enrlEndDttm}								
			        ,  ENRL_CERT_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  MOD_NO 			= #{item.modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{item.stdNo}									
			   AND (																
			       SELECT                                              			
			         count(std_no) AS cnt                              			
			       FROM tb_std_std a,                                  			
			         (SELECT                                           			
			           user_no                                         			
			           ,crs_cre_cd                                     			
			           ,decls_no                                       			
			           ,enrl_sts                                       			
			         FROM tb_std_std                                   			
			         WHERE std_no = #{item.stdNo}		                     				
			         ) b                                               			
			       WHERE a.crs_cre_cd = b.crs_cre_cd                   			
			       AND a.user_no = b.user_no                           			
			       AND a.enrl_sts = 'S'                                			
			       ) < 1 
			]]> 
			</foreach>
		</when>
		<otherwise>
			<foreach collection="list" item="item" index="index" open="DECLARE BEGIN" close="; END;" separator=";">
		
				UPDATE 	tb_std_std 																	
			    SET
			      	   ENRL_STS 			= #{item.enrlSts}			 									
			        ,  ENRL_START_DTTM 	= CONCAT(DATE_FORMAT(NOW(),'%Y%m%d'),'000001')					
			        ,  ENRL_END_DTTM 		= CONCAT(DATE_FORMAT(NOW() + #{item.enrlDaycnt}, '%Y%m%d'),'235959')	
			        ,  AUDIT_END_DTTM 		= CONCAT(DATE_FORMAT(NOW() + #{item.enrlDaycnt}, '%Y%m%d'),'235959')	
			        ,  ENRL_CERT_DTTM		= DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')					
			        ,  ENRL_CANCEL_DTTM 	= ''													
			        ,  MOD_NO 				= #{item.modNo}												
			        ,  MOD_DTTM 			= DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')				    
			  	WHERE  STD_NO 				= #{item.stdNo}
			  	 <![CDATA[ 												
			   AND (																
			       SELECT                                              			
			         count(std_no) AS cnt                              			
			       FROM tb_std_std a,                                  			
			         (SELECT                                           			
			           user_no                                         			
			           ,crs_cre_cd                                     			
			           ,decls_no                                       			
			           ,enrl_sts                                       			
			         FROM tb_std_std                                   			
			         WHERE std_no = #{item.stdNo}		                     				
			         ) b                                               			
			       WHERE a.crs_cre_cd = b.crs_cre_cd                   			
			       AND a.user_no = b.user_no                           			
			       AND a.enrl_sts = 'S'                                			
			       ) < 1 
			  ]]>
			</foreach>
		</otherwise>
	</choose>
	</update>
	
	<update id="confirmStudent" parameterType="studentVO">
	<choose>
		<when test='crsOperType == "R"'>
			 <include refid="getConfirmStudentRQuery" />
		</when>
		<otherwise>
			 <include refid="getConfirmStudentSQuery" />
		</otherwise>
	</choose>
	</update>

	
	<update id="cancelStudent" parameterType="list">
	<!-- 수강 신청 일괄 취소  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			 UPDATE tb_std_std 												
		        SET ENRL_STS = #{item.enrlSts}			 							
		          , ENRL_CANCEL_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		          <!-- , REPAY_STS_CD = IFNULL(FN_GET_NULL(#{item.repayStsCd}), REPAY_STS_CD)			
		          , REPAY_REQ_DTTM = (CASE WHEN #{item.repayStsCd} ='REFUND001' THEN (CASE WHEN IFNULL(FN_GET_NULL(REPAY_REQ_DTTM),'1') = '1'THEN DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') ELSE REPAY_REQ_DTTM END)
		                             ELSE REPAY_REQ_DTTM END)			           -->
		          , MOD_NO	= #{item.modNo}											
		          , MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		      WHERE STD_NO = #{item.stdNo}					
		</foreach>
	</update>
	
	<update id="deleteStudent" parameterType="list">
	<!-- 수강 신청 일괄 삭제  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			 	UPDATE 	tb_std_std 														
		      SET	ENRL_STS 			= #{item.enrlSts}			 						
		        ,  ENRL_CERT_DTTM		= ''										
		        ,  ENRL_CANCEL_DTTM 	= ''										
		        ,  MOD_NO 				= #{item.modNo}									
		        ,  MOD_DTTM 			= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE 	STD_NO 				= #{item.stdNo}						
		</foreach>
	</update>
	
	<update id="deleteStudentOne" parameterType="studentVO">
			UPDATE 	tb_std_std 														
		      SET	ENRL_STS 			= #{enrlSts}			 						
		        ,  ENRL_CERT_DTTM		= ''										
		        ,  ENRL_CANCEL_DTTM 	= ''										
		        ,  MOD_NO 				= #{modNo}									
		        ,  MOD_DTTM 			= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE 	STD_NO 				= #{stdNo}					
	</update>	

 
		
	<update id="cancelComplete" parameterType="list">
	<!-- 수료 처리 일괄 취소  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
				UPDATE 	tb_std_std 													
		      SET	ENRL_STS 		= 'S'					 					
		        ,  ENRL_CPLT_DTTM 	= ''										
		        ,  CPLT_NO 		= ''										
		        ,  GET_CREDIT 		= 0											
		        ,  MOD_NO 			= #{item.modNo}									
		        ,  MOD_DTTM 			= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE  STD_NO 			= #{item.stdNo}						
		</foreach>
	</update>

	
	<update id="cancelRsltComplete" parameterType="list">
	<!-- 수료 처리 일괄 취소(교육결과)  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
				UPDATE 	tb_std_edu_rslt 										
		      SET	CONV_SCORE 	= 0					 						
		        ,  MOD_NO 		= #{item.modNo}									
		        ,  MOD_DTTM 			= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE  STD_NO 		= #{item.stdNo}					
		</foreach>
	</update>
	


	<update id="updateEduNo" parameterType="list">
	<!-- 교번 일괄 저장  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
			UPDATE 	tb_std_std 											
		      SET	EDU_NO = #{item.eduNo}				 						
		    WHERE  STD_NO = #{item.stdNo}				
		</foreach>
	</update>

	
	<select id ="isStudent" parameterType="studentVO" resultType="studentVO"> 
	<!-- 수강생 검색 -->
	<![CDATA[ 	
				SELECT 	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END STD_YN 	
		     FROM 	tb_std_std												
		    WHERE  CRS_CRE_CD 	= #{crsCreCd}									
		      AND  STD_NO 		= #{stdNo}									
		      AND  ENRL_STS IN ('S','C','F')
	]]>				
	</select>
	
	<select id ="isStudentByUserNo" parameterType="studentVO" resultType="studentVO"> 
	<!-- 수강생 검색 -->
	<![CDATA[ 	
				SELECT 	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END STD_YN 	
		     FROM 	tb_std_std												
		    WHERE  CRS_CRE_CD 	= #{crsCreCd}									
		      AND  USER_NO 		= #{userNo}									
		      AND  ENRL_STS IN ('S','C','F')
	]]>				
	</select>
	
	<select id ="isEnroll" parameterType="studentVO" resultType="studentVO"> 
	<!-- 수강신청 검색 -->
	<![CDATA[ 	
			SELECT 	CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END STD_YN 	
		     FROM 	tb_std_std												
		    WHERE  CRS_CRE_CD 	= #{crsCreCd}									
		      AND  USER_NO 	= #{userNo}									
		      AND  ENRL_STS IN ('E','S','C','F')	
	]]>				
	</select>
	
	<select id ="selectMyStdNo" parameterType="studentVO" resultType="studentVO"> 
	<!-- 수강신청 검색 -->
	<![CDATA[ 	
			SELECT 	A.STD_NO, A.PAYM_NO
		     FROM 	tb_std_std A											
		    WHERE  A.CRS_CRE_CD 	= #{crsCreCd}									
		      AND  A.USER_NO 	= #{userNo}									
		      AND  A.ENRL_STS IN ('E','S','C','F')	
	]]>				
	</select>


	<select id ="enrollCnt" parameterType="studentVO" resultType="studentVO"> 
	<!-- 수강신청자수 검색 -->
		SELECT 	COUNT(*) AS ENRL_CNT								 	
		     FROM  tb_std_std												
		    WHERE  CRS_CRE_CD = #{crsCreCd}									
		      AND  ENRL_STS IN ('E','S','C','F')			
	</select>

	
	<update id="autoCompleteSp" statementType="CALLABLE" parameterType="studentVO">
	<!-- 수강생 자동 수료 처리 (프로시저 이용) -->
		{  call SP_AUTO_COMPLETE( #{crsCreCd}, #{regNo} )  ") }
	</update>

	<update id="reshAutoCompleteSp" statementType="CALLABLE" parameterType="studentVO">
	<!-- 수강생 수료처리 -->
		{ call SP_AUTO_COMPLETE_RESH_STD( #{crsCreCd} , #{stdNo})  ") }
	</update>
	


	 <update id="checkCompleteSp" statementType="CALLABLE" parameterType="studentVO">
		{ call SP_AUTO_COMPLETE_STD( #{crsCreCd} , #{stdNo}, #{regNo}) ") }
	</update>


	<update id="updateDateForMigration" parameterType="list">
	<!-- 수강신청 마이그래에선용 업데이트 쿼리  -->
		<foreach collection="list" item="item" index="index" open="" close="" separator=";">
		 	UPDATE 	tb_std_std 											
		      SET  ENRL_APLC_DTTM 	= #{item.enrlAplcDttm}	 					
		        ,  REG_DTTM 		= #{item.regDttm}			 				
		        ,  MOD_DTTM	 	= #{item.modDttm}			 				
		    WHERE  STD_NO 			= #{item.stdNo}		
		</foreach>
	</update>


	<update id="confirmDepositStudent" parameterType="list">
	<!-- 수강생 입금 확인 일괄 처리  -->
		<!-- <foreach collection="list" item="item" index="index" open="DECLARE BEGIN" close="; END;" separator=";">
		 	UPDATE 	tb_std_std 
		 	SET											
		     	PAYM_PRICE 		= #{item.paymPrice}							
		        ,  PAYM_STS_CD     = #{item.paymStsCd}							
		        ,  PAYM_DTTM 	    = #{item.paymDttm}								
		        ,  MOD_NO 			= #{item.modNo}								
		        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
		  	 WHERE  
		  	 <![CDATA[ 
		  		 STD_NO = #{item.stdNo}								
		  	   and  ENRL_STS <> 'N'											
		  	   and  PAYM_MTHD_CD IN ('PAYM003', 'PAYM004')					
		  	   and  IFNULL(FN_GET_NULL(PAYM_STS_CD),'N') != 'Y'	
		 ]]>			
		</foreach> -->
	</update>
	
	<select id="selectStdNoByPayNo" parameterType="studentVO" resultType="studentVO">
		SELECT STD_NO
		FROM tb_std_std
		WHERE PAYM_NO = #{paymNo}
		 	AND ENRL_STS IN ('E')
	</select>
	
	<update id="updateStudentEnrlStsVbank" parameterType="studentVO">
		UPDATE tb_std_std
		SET
			ENRL_STS = #{enrlSts}
		WHERE PAYM_NO = #{paymNo}
		 	AND ENRL_STS IN ('E')
	</update>

	<sql id="selectStudentPaymentInfoQuery">
		SELECT 	A.STD_NO 
				, A.USER_NO
				, A.ENRL_STS 
				, A.ENRL_START_DTTM 
				, A.ENRL_END_DTTM
				, A.REPAY_PRICE
				, A.REPAY_STS_CD
				, A.REPAY_REQ_DTTM
				, A.REPAY_DTTM
				, A.STD_PRICE 
				, B.PAYM_NO 
				, B.PAYM_MTHD_CD 
				, FN_GET_CODE_NAME( 'PAYM_MTHD_CD', B.PAYM_MTHD_CD) AS PAYM_MTHD_NM 
				, B.PAYM_STS_CD
				, FN_GET_CODE_NAME( 'PAYM_STS_CD', B.PAYM_STS_CD) AS PAYM_STS_NM
				, B.PAYM_PRICE 
				, B.PAYM_OID_NO
				, B.TID
				, B.PAY_METHOD
				, B.REG_DTTM 
				, B.VACT_NUM 
				, B.VACT_BANK_CODE 
				, B.VACT_BANK_NAME 
				, B.VACT_NAME 
				, B.VACT_INPUT_NAME 
				, B.VACT_DATE 
				, B.VACT_TIME 
				, B.DEVICE_TYPE
				, C.CRS_CRE_CD 
				, C.CRS_CRE_NM
				, C.CRE_TERM 
				, D.CRS_CD 
				, D.CRS_YEAR 
				, D.CRS_TERM		
				, (SELECT SUM(STD_PRICE) FROM tb_std_std WHERE PAYM_NO = A.PAYM_NO ) AS STD_TOT_PRICE
				, (SELECT COUNT(1) FROM tb_std_std WHERE PAYM_NO = A.PAYM_NO ) AS STU_CNT
				, (SELECT COUNT(1) FROM tb_lec_bookmark where std_no = A.STD_NO) AS BOOKMARK_CNT
				, (SELECT SUM(REPAY_PRICE) FROM tb_std_std WHERE PAYM_NO = A.PAYM_NO ) AS STD_REPAY_PRICE_SUM
	</sql>
	<sql id="fromStudentPaymentInfoQuery">
		FROM tb_std_std A, tb_std_pay_info B, tb_crs_cre_crs C, tb_crs_crs D
		WHERE A.PAYM_NO = B.PAYM_NO
		AND A.USER_NO = B.USER_NO
		AND A.CRS_CRE_CD = C.CRS_CRE_CD 
		AND C.CRS_CD = D.CRS_CD
		AND A.ENRL_STS IN ('S','C','F','E','N')
	</sql>
	<sql id="orderStudentPaymentInfoQuery">
		ORDER BY C.CRS_CD DESC, B.PAYM_NO DESC, C.CRS_CRE_NM	
	</sql>

	<select id="listStudentPaymentInfoByUserNo" parameterType="studentVO" resultType="studentVO">
		<include refid="selectStudentPaymentInfoQuery"/>
		<include refid="fromStudentPaymentInfoQuery"/>
		AND B.USER_NO = #{userNo}
		<include refid="orderStudentPaymentInfoQuery"/>
	</select>
	
	<select id="selectStudentPaymentInfoByStdNo" parameterType="studentVO" resultType="studentVO">
		<include refid="selectStudentPaymentInfoQuery"/>
		<include refid="fromStudentPaymentInfoQuery"/>
		AND A.STD_NO = #{stdNo}
		<include refid="orderStudentPaymentInfoQuery"/>
	</select>
	
	<select id="selectStdForAttend" parameterType="studentVO" resultType="studentVO">
		SELECT    A.STD_NO 																	
		          , A.CRS_CRE_CD
		          , D.SBJ_CD 																
		          , A.DECLS_NO 																
		          , A.USER_NO 																	
		          , A.ENRL_STS 																														
		          , A.EDU_NO 																	
		          , A.CPLT_NO 																	
		          , A.GET_CREDIT 																														
		          , B.USER_NM															
		          , B.BIRTH															
	              , B.SEX_CD															
	              , B.EMAIL															
	              , B.DEPT_CD															
	              , B.DEPT_NM	
	              , B.MOBILE_NO															
	              , B.HOME_PHONENO															
	              , B.COMP_FAX_NO															
	              , B.COMP_PHONENO															
	              , B.ETC_PHONENO															
	              , B.HOME_ADDR_1															
	              , B.DISABLILITY_YN															
		          , C.USER_ID
     FROM tb_std_std A, tb_usr_user_info B, tb_usr_login C, tb_crs_cre_crs D						
		      	WHERE A.STD_NO = #{stdNo}							
		        AND A.USER_NO = B.USER_NO
		        AND A.CRS_CRE_CD = D.CRS_CRE_CD														
		        AND B.USER_NO = C.USER_NO											
		        AND C.USER_STS = 'U'
		        AND A.ENRL_STS IN ('S','C','F')		          
	</select>
	
	<sql id="selectForStdManageQuery">
		SELECT    A.STD_NO 																	
		          , A.CRS_CRE_CD
		          , D.SBJ_CD 																
		          , A.DECLS_NO 																
		          , A.USER_NO 																	
		          , A.ENRL_STS 																														
		          , A.EDU_NO 																	
		          , A.CPLT_NO 																	
		          , A.GET_CREDIT 
		          , A.CERT_APLC_DTTM
		          , A.CERT_STS
		          , A.CERT_SCORE
		          , A.CERT_PASS_YN																														
		          , B.USER_NM															
		          , B.BIRTH															
	              , B.SEX_CD															
	              , B.EMAIL															
	              , B.DEPT_CD															
	              , B.DEPT_NM	
	              , B.MOBILE_NO															
	              , B.HOME_PHONENO															
	              , B.COMP_FAX_NO															
	              , B.COMP_PHONENO															
	              , B.ETC_PHONENO															
	              , B.HOME_ADDR_1															
	              , B.DISABLILITY_YN															
		          , C.USER_ID															
		       FROM tb_std_std A, tb_usr_user_info B, tb_usr_login C, tb_crs_cre_crs D						
		      	WHERE A.CRS_CRE_CD = #{crsCreCd}							
		        AND A.USER_NO = B.USER_NO
		        AND A.CRS_CRE_CD = D.CRS_CRE_CD														
		        AND B.USER_NO = C.USER_NO											
		        AND C.USER_STS = 'U'
		        AND A.ENRL_STS IN ('S','C','F')
			<if test = "declsNo != null and declsNo != ''">
		  		AND D.DECLS_NO = #{declsNo}
		  	</if>		        
			<if test = "userNm != null and userNm != ''">
		  		AND CONCAT(B.USER_NM, C.USER_ID) like CONCAT('%', IFNULL(#{userNm}, ''),'%')
		  	</if>
			<if test = 'searchValue != null and searchValue != ""'>
			   AND (CASE WHEN #{searchKey} = 'userId' THEN C.USER_ID ELSE B.USER_NM END) like CONCAT('%',#{searchValue},'%')
			</if>
	</sql>

	<select id="countForStdManage" parameterType="studentVO" resultType="Integer">
		SELECT COUNT(1) FROM (
			<include refid="selectForStdManageQuery"/>
		) STD
	</select>
	
	<select id="listStudentForStdManage" parameterType="studentVO" resultType="studentVO">
			<include refid="selectForStdManageQuery"/>
			ORDER BY USER_NM ASC
	</select>

	<select id="listStudentPageingForStdManage" parameterType="studentVO" resultType="studentVO">
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix"/>
			<include refid="selectForStdManageQuery"/>
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
		ORDER BY USER_NM ASC
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix"/>
	</select>
	
	<select id ="selectStudentEnrollBefore" parameterType="studentVO" resultType="studentVO"> 
	/*
		대기중인 수강생 조회 : 입금취소 확인용
	*/
	<![CDATA[ 	
			SELECT 	A.STD_NO, A.ENRL_STS, A.PAYM_NO, B.PAYM_STS_CD
		     FROM 	tb_std_std A, tb_std_pay_info B											
		    WHERE  A.PAYM_NO = B.PAYM_NO
		    	AND A.CRS_CRE_CD 	= #{crsCreCd}									
		      AND  A.USER_NO 	= #{userNo}									
		      AND  A.STD_NO 	= #{stdNo}									
		      AND  A.ENRL_STS IN ('E')	
	]]>
	<!-- AND B.PAYM_STS_CD = 'DI' -->				
	</select>
	
	<sql id="selectStuPayManageQuery">
		SELECT 	A.STD_NO
				, A.CRS_CRE_CD
				, A.DECLS_NO
				, A.USER_NO
				, A.ENRL_STS
				, A.ENRL_START_DTTM
				, A.ENRL_END_DTTM
				, A.AUDIT_END_DTTM
				, A.ENRL_APLC_DTTM
				, A.ENRL_CANCEL_DTTM
				, A.ENRL_CERT_DTTM
				, A.ENRL_CPLT_DTTM
				, A.EDU_NO
				, A.CPLT_NO
				, A.GET_CREDIT
				, A.STAY_APLC_YN
				, A.PAYM_NO
				, A.COMP_NM
				, A.REPAY_PRICE
				, A.REPAY_MTHD_CD
				, A.REPAY_STS_CD
				, A.REPAY_REQ_DTTM
				, A.REPAY_DTTM
				, A.REPAY_BANK_NM
				, A.REPAY_USER_NM
				, A.REPAY_ACNT_NO
				, A.REPAY_REASON
				, A.REPAY_MEMO
				, A.REPAY_RSLT_CD
				, A.BIZZ_NO
				, A.AREA_CD
				, A.ORG_CD
				, A.EMP_NO
				, A.SCORE_ECLT_YN
				, A.STD_PRICE
				, A.REG_DTTM
				, A.IDE_URL
				, B.PAYM_MTHD_CD
				, FN_GET_CODE_NAME('PAYM_MTHD_CD',B.PAYM_MTHD_CD) AS PAYM_MTHD_NM
				, B.PAYM_STS_CD
				, B.PAYM_PRICE
				, B.PAYM_DTTM
				, B.PAYM_BANK_NM
				, B.PAYM_OID_NO
				, B.IN_DTTM
				, B.IN_PRICE
				, B.TID
				, B.PAY_METHOD
				, B.TOT_PRICE
				, B.MOID
				, B.APPL_DATE
				, B.APPL_TIME
				, B.CARD_NUM
				, B.APPL_NUM
				, B.EVENT_CODE
				, B.CARD_QUOTA
				, B.CARD_INTEREST
				, B.INTEREST_FREE_YN
				, B.CARD_POINT
				, B.CARD_CODE
				, B.CARD_CROP_FLAG
				, B.CARD_CHECK_FLAG
				, B.CARD_PRTC_CODE
				, B.CARD_BANKCODE
				, B.CARD_SRC_CODE
				, B.ACCT_BANK_CODE
				, B.CSHR_RESULT_CODE
				, B.CSHR_TYPE
				, B.ACCT_NAME
				, B.VACT_NUM
				, B.VACT_BANK_CODE
				, B.VACT_BANK_NAME
				, B.VACT_NAME
				, B.VACT_INPUT_NAME
				, B.VACT_DATE
				, B.VACT_TIME
				, B.DEVICE_TYPE
				, C.USER_NM
				, C.BIRTH
				, C.DEPT_CD
				, C.DEPT_NM
				, D.USER_ID
				, E.CRS_CRE_NM
				, E.CRE_TERM
				, E.REFUND_YN
				, F.CRS_CD
				, F.CRS_NM
				<!-- , F.CRS_TERM -->
				<!--
				, G.SBJ_CD
				, G.SBJ_NM
				-->
	</sql>
	<sql id="fromStuPayManageQuery">
		<!-- FROM tb_std_std A, tb_std_pay_info B, tb_usr_user_info C, tb_usr_login D, tb_crs_cre_crs E, tb_crs_crs F, tb_crs_onln_sbj G
		WHERE A.PAYM_NO = B.PAYM_NO
			AND A.USER_NO = C.USER_NO 
			AND C.USER_NO = D.USER_NO 
			AND A.CRS_CRE_CD = E.CRS_CRE_CD
			AND E.CRS_CD = F.CRS_CD 
			AND E.SBJ_CD = G.SBJ_CD  -->
		from tb_std_std A left outer join tb_std_pay_info B on A.PAYM_NO = B.PAYM_NO 
		join tb_usr_user_info C on A.user_no = C.user_no 
		join tb_usr_login D on C.user_no = D.user_no
		join tb_crs_cre_crs E on A.CRS_CRE_CD = E.CRS_CRE_CD 
		join tb_crs_crs F on E.crs_cd = F.CRS_CD 
		<!-- join tb_crs_onln_sbj G on E.SBJ_CD = G.SBJ_CD -->
	</sql>
	<sql id="whereStuPayManageQuery">
		AND A.ENRL_STS != 'D'
		
		<if test = "orgCd != null and orgCd != ''">                          			
	    	AND A.ORG_CD = #{orgCd}  
	    </if>	
		<if test = 'deptCd != null and deptCd != ""'>
			AND C.DEPT_CD = #{deptCd}
		</if>
		<if test = 'crsCd != null and crsCd != ""'>
			AND E.CRS_CD = #{crsCd}
		</if>
		<if test = 'crsCreCd != null and crsCreCd != ""'>
			AND E.CRS_CRE_CD = #{crsCreCd}
		</if>
		<if test = 'sbjCd != null and sbjCd != ""'>
			AND G.SBJ_CD = #{sbjCd}
		</if>
		<if test = 'enrlSts != null and enrlSts != ""'>
			AND A.ENRL_STS = #{enrlSts}
		</if>
		<if test = 'paymStsCd != null and paymStsCd != ""'>
			AND B.PAYM_STS_CD = #{paymStsCd}
		</if>
		<if test = 'paymMthdCd != null and paymMthdCd != ""'>
			AND B.PAYM_MTHD_CD = #{paymMthdCd}
		</if>
		<if test = 'searchKey != null and searchKey != "" and searchValue != null and searchValue != ""'>
			<if test='searchKey == "userId"'>
				AND D.USER_ID like CONCAT('%', IFNULL(#{searchValue}, ''),'%')
				
			</if>
			<if test='searchKey == "userNm"'>
				AND C.USER_NM like CONCAT('%', IFNULL(#{searchValue}, ''),'%')
			</if>
		</if>
		
		<if test = 'searchEnrlSts != null and searchEnrlSts != ""'>
			<if test='searchEnrlSts == "SCF"'>
				AND A.ENRL_STS IN ('S','C','F')
			</if>
			<if test='searchEnrlSts == "N"'>
				AND A.ENRL_STS IN ('N')
			</if>
			<if test='searchEnrlSts == "E"'>
				AND A.ENRL_STS IN ('E')
			</if>
		</if>
		
		<if test = 'searchConfirmYn != null and searchConfirmYn != ""'>
			<if test='searchConfirmYn == "Y"'>
				AND A.ENRL_STS IN ('E','N')
			</if>
			<if test='searchConfirmYn == "N"'>
				AND A.ENRL_STS IN ('S','E')
			</if>
		</if>
		
		<if test = 'repayStsCd != null and repayStsCd != ""'>
			AND A.REPAY_STS_CD = #{repayStsCd}
		</if>
		
	</sql>
	<sql id="orderbyStuPayManageQuery">
		<if test = 'sortKey != null and sortKey != ""'>
			<if test = 'sortKey == "STD_NO_ASC"'>
			 ORDER BY STD_NO ASC
			</if>
			<if test = 'sortKey == "STD_NO_DESC"'>
			 ORDER BY STD_NO DESC
			</if>
			<if test = 'sortKey == "USER_NM_ASC"'>
			 ORDER BY USER_NM ASC
			</if>
			<if test = 'sortKey == "USER_NM_DESC"'>
			 ORDER BY USER_NM DESC
			</if>
		</if>
		<if test = 'sortKey == null or sortKey == ""'>
		   ORDER BY REG_DTTM DESC
		</if>
	</sql>
	
	<sql id="listStuPayManageQuery">
		<include refid="selectStuPayManageQuery"/>
		<include refid="fromStuPayManageQuery"/>
		<include refid="whereStuPayManageQuery"/>
	</sql>	
	
	<sql id="selectStuPayManagePageingStatusCountQuery">
		/*
			수강신청관리 페이징 상단 통계 용 - 순수 전체 count 용
		*/
		SELECT  COUNT(CASE WHEN A.ENRL_STS = 'E' THEN 1 END) AS STU_E_CNT,
				COUNT(CASE WHEN A.ENRL_STS = 'N' THEN 1 END) AS STU_N_CNT,
				COUNT(CASE WHEN A.ENRL_STS = 'S' THEN 1 END) AS STU_S_CNT,
				COUNT(CASE WHEN A.ENRL_STS = 'F' THEN 1 END) AS STU_F_CNT,
				COUNT(CASE WHEN A.ENRL_STS = 'C' THEN 1 END) AS STU_C_CNT,
				COUNT(1) AS STU_CNT,
				COUNT(DISTINCT B.PAYM_NO) as PAY_CNT,
				COUNT(DISTINCT (CASE WHEN B.PAYM_MTHD_CD = 'PAYM001' then B.PAYM_NO END)) as CARD_CNT,
				COUNT(DISTINCT (CASE WHEN B.PAYM_MTHD_CD = 'PAYM002' then B.PAYM_NO END)) as ACCT_CNT,
				COUNT(DISTINCT (CASE WHEN B.PAYM_MTHD_CD = 'PAYM003' then B.PAYM_NO END)) as VACT_CNT,
				COUNT(DISTINCT (CASE WHEN B.PAYM_MTHD_CD = 'PAYM004' then B.PAYM_NO END)) as SITE_CNT		
	</sql>
	
	<select id="listStudentPaymentInfoManage" parameterType="studentVO" resultType="studentVO">
		/*
			 SQL ID : listStudentPaymentInfoManage
			 설  명 : 수강신청관리 리스트
	 	*/
	 	<include refid="listStuPayManageQuery"/>
	 	<include refid="orderbyStuPayManageQuery"/>
	</select>
	
	<select id="listIdeManage" parameterType="studentVO" resultType="studentVO">
		/*
			 SQL ID : listIdeManage
			 설  명 : 수강신청관리 IDE 리스트
	 	*/
	 	SELECT IDE_URL
		FROM TB_ORG_IDE_INFO
		WHERE USE_YN = 'Y'
		AND IDE_URL NOT IN(
			SELECT IDE_URL
			FROM TB_STD_STD
			WHERE IDE_URL IS NOT NULL
		)
	</select>
	
		
	<select id="listStudentPaymentInfoManagePageingCount" parameterType="studentVO" resultType="studentVO">
		
		<include refid="selectStuPayManagePageingStatusCountQuery"/>
		<include refid="fromStuPayManageQuery"/>
		<include refid="whereStuPayManageQuery"/>
	</select>
	<select id="listStudentPaymentInfoManagePageing" parameterType="studentVO" resultType="studentVO">
		/*
			 SQL ID : listStudentPaymentInfoManagePageing
			 설  명 :  수강신청관리 페이징 목록
	 	*/
	 	<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix"/>
	 	<include refid="listStuPayManageQuery"/>
	 	<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
	 	
	 	<include refid="orderbyStuPayManageQuery"/>
	 	<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix"/>
	</select>
	
	<select id="selectStudentPaymentInfoManage" parameterType="studentVO" resultType="studentVO">
		/*
			 SQL ID : selectStudentPaymentInfoManage
			 설  명 :  수강신청관리 상세보기
	 	*/
	 	<include refid="selectStuPayManageQuery"/>
		<include refid="fromStuPayManageQuery"/>
		AND A.STD_NO = #{stdNo}
	</select>
	
	<sql id="selectStudentInfoCreQuery">
		SELECT 	A.STD_NO
				, A.CRS_CRE_CD
				, A.DECLS_NO
				, A.USER_NO
				, A.ENRL_STS
				, A.ENRL_START_DTTM
				, A.ENRL_END_DTTM
				, A.AUDIT_END_DTTM
				, A.ENRL_APLC_DTTM
				, A.ENRL_CANCEL_DTTM
				, A.ENRL_CERT_DTTM
				, A.ENRL_CPLT_DTTM
				, A.CERT_APLC_DTTM
				, A.EDU_NO
				, A.CPLT_NO
				, A.CERT_STS
				, A.CERT_SCORE
				, A.CERT_PASS_YN
				, A.GET_CREDIT
				, A.STAY_APLC_YN
				, A.PAYM_NO
				, A.COMP_NM
				, A.BIZZ_NO
				, A.AREA_CD
				, A.ORG_CD
				, A.EMP_NO
				, A.SCORE_ECLT_YN
				, A.STD_PRICE
				, A.REG_DTTM
				, C.USER_NM
				, C.BIRTH
				, C.DEPT_CD
				, C.DEPT_NM
				, D.USER_ID
				, E.CRS_CRE_NM
				, E.REFUND_YN
				, F.CRS_CD
				, F.CRS_YEAR
				, F.CRS_TERM
				, G.SBJ_CD
				, G.SBJ_NM
	</sql>
	<sql id="fromStudentInfoCreQuery">
		FROM tb_std_std A , tb_usr_user_info C, tb_usr_login D, tb_crs_cre_crs E, tb_crs_crs F, tb_crs_onln_sbj G
		WHERE 1=1 
			AND A.USER_NO = C.USER_NO 
			AND C.USER_NO = D.USER_NO 
			AND A.CRS_CRE_CD = E.CRS_CRE_CD
			AND E.CRS_CD = F.CRS_CD 
			AND E.SBJ_CD = G.SBJ_CD 
	</sql>
	<sql id="whereStudentInfoCreQuery">
		AND A.ENRL_STS != 'D'
		
		<if test = 'deptCd != null and deptCd != ""'>
			AND C.DEPT_CD = #{deptCd}
		</if>
		<if test = 'crsCd != null and crsCd != ""'>
			AND E.CRS_CD = #{crsCd}
		</if>
		<if test = 'crsCreCd != null and crsCreCd != ""'>
			AND E.CRS_CRE_CD = #{crsCreCd}
		</if>
		<if test = 'sbjCd != null and sbjCd != ""'>
			AND G.SBJ_CD = #{sbjCd}
		</if>
		<if test = 'enrlSts != null and enrlSts != ""'>
			AND A.ENRL_STS = #{enrlSts}
		</if>
		<if test = 'searchKey != null and searchKey != "" and searchValue != null and searchValue != ""'>
			<if test='searchKey == "userId"'>
				AND D.USER_ID like CONCAT('%', NVL(#{searchValue}, ''),'%')
				
			</if>
			<if test='searchKey == "userNm"'>
				AND C.USER_NM like CONCAT('%', NVL(#{searchValue}, ''),'%')
			</if>
		</if>
		
		<if test = 'searchEnrlSts != null and searchEnrlSts != ""'>
			<if test='searchEnrlSts == "SCF"'>
				AND A.ENRL_STS IN ('S','C','F')
			</if>
			<if test='searchEnrlSts == "N"'>
				AND A.ENRL_STS IN ('N')
			</if>
			<if test='searchEnrlSts == "E"'>
				AND A.ENRL_STS IN ('E')
			</if>
		</if>
		
		<if test = 'searchConfirmYn != null and searchConfirmYn != ""'>
			<if test='searchConfirmYn == "Y"'>
				AND A.ENRL_STS IN ('E','N')
			</if>
			<if test='searchConfirmYn == "N"'>
				AND A.ENRL_STS IN ('S','E')
			</if>
		</if>
		
	</sql>
	<sql id="orderbyStudentInfoCreQuery">
		<if test = 'sortKey != null and sortKey != ""'>
			<if test = 'sortKey == "STD_NO_ASC"'>
			 ORDER BY STD_NO ASC
			</if>
			<if test = 'sortKey == "STD_NO_DESC"'>
			 ORDER BY STD_NO DESC
			</if>
			<if test = 'sortKey == "USER_NM_ASC"'>
			 ORDER BY USER_NM ASC
			</if>
			<if test = 'sortKey == "USER_NM_DESC"'>
			 ORDER BY USER_NM DESC
			</if>
		</if>
		<if test = 'sortKey == null or sortKey == ""'>
		   ORDER BY REG_DTTM DESC
		</if>
	</sql>
	
	<select id="selectStudentInfoCre" parameterType="studentVO" resultType="studentVO">
		/*
			 SQL ID : selectStudentInfoCre
			 설  명 :  수강데이터
	 	*/
	 	<include refid="selectStudentInfoCreQuery"/>
		<include refid="fromStudentInfoCreQuery"/>
		AND A.STD_NO = #{stdNo}
	</select>
	
	<update id="updateStudentEnrlStsConfirm" parameterType="studentVO">
		UPDATE 	tb_std_std 													
			     SET
			      	   ENRL_STS 		= #{enrlSts}			 						
			        ,  ENRL_CERT_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}	
	</update>
	
	<update id="updateStudentEnrlStsCancel" parameterType="studentVO">
		UPDATE 	tb_std_std 													
			     SET
			      	   ENRL_STS 		= #{enrlSts}			 						
			        ,  ENRL_CANCEL_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			        ,  REPAY_PRICE		= #{repayPrice}
			        ,  REPAY_DTTM		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')	
			        ,  REPAY_MEMO		= #{repayMemo}
			  	 WHERE  STD_NO 			= #{stdNo}	
	</update>
	
	<update id="updateStudentEnrlSts" parameterType="studentVO">
		UPDATE 	tb_std_std 													
			     SET
			      	   ENRL_STS 		= #{enrlSts}			 						
			        ,  ENRL_CERT_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}	
	</update>
	
	<select id="stdBookmarkListForAttend" parameterType="studentVO" resultType="bookmarkVO">
		SELECT  A.UNIT_CD
			 ,	B.STD_NO													
		   	 ,	B.SBJ_CD													
		   	 ,	B.STUDY_YN
		   	 ,	NVL(B.ATTEND_STS_CD, 'EMPTY') as attendStsCd
		   	 ,	B.STUDY_DTTM												
		   	 ,	B.QUIZ_PASS_YN											
		   	 ,	B.PASS_SCORE												
		   	 ,	B.MAX_SCORE												
		   	 ,	B.MIN_SCORE												
		   	 ,	B.CONN_TOT_TM												
		   	 ,	B.CONN_TM													
		   	 ,	B.FINAL_CONN_PAGE											
		   	 ,	B.ACCM_CONN_PAGE											
		   	 ,	B.CONN_PAGE_CNT											
		   	 ,	B.TOT_PAGE_CNT											
		   	 ,	B.PRGR_RATIO												
		   	 ,	B.CONN_CNT												
		   	 ,	B.STUDY_DIV												
		   	 ,	B.MOBILE_TM												
		   	 ,	B.STUDY_BLOCK_INFO										
		   	 ,	B.REG_NO													
		   	 ,	B.REG_DTTM												
		   	 ,	B.MOD_NO													
		   	 ,	B.MOD_DTTM																				
		     FROM tb_crs_sbj_cnts A LEFT OUTER JOIN tb_lec_bookmark B
		     	ON (A.UNIT_CD = B.UNIT_CD
		     		AND B.STD_NO = #{stdNo}) 											
		    WHERE A.SBJ_CD  = #{sbjCd}
		   		AND A.UNIT_LVL = 1
		    ORDER BY A.UNIT_ODR								
	</select>
	
	<select id="listStdCertCourse" parameterType="courseVO" resultType="studentVO">
		SELECT 	  A.STD_NO 
				, A.USER_NO
				, A.CERT_STS 
				, A.CERT_APLC_DTTM
				, A.CERT_PASS_YN
				, A.CERT_SCORE
				, A.CERT_FAIL_REASON
				, B.CRS_CRE_CD 
				, B.CRS_CRE_NM 
				, C.CRS_CD 
				, C.CRS_NM
				, C.SCORE_OPEN_START_DTTM
				, C.SCORE_OPEN_END_DTTM 
		FROM tb_std_std A, tb_crs_cre_crs B, tb_crs_crs C
		WHERE A.CRS_CRE_CD = B.CRS_CRE_CD 
			AND B.CRS_CD = C.CRS_CD
			AND C.CRS_OPER_TYPE = #{crsOperType}
			AND A.USER_NO = #{userNo}
			AND C.CRS_CD = #{crsCd}
		ORDER BY B.CRS_CRE_NM	;
	</select>
	
	<select id="stdCertCourse" parameterType="studentVO" resultType="studentVO">
		SELECT 	  A.STD_NO 
				, A.USER_NO
				, A.CERT_STS 
				, A.CERT_APLC_DTTM
				, A.CERT_PASS_YN
				, A.CERT_SCORE
				, B.CRS_CRE_CD 
				, B.CRS_CRE_NM 
				, C.CRS_CD 
				, C.CRS_NM
				, C.SCORE_OPEN_START_DTTM
				, C.SCORE_OPEN_END_DTTM 
		FROM tb_std_std A, tb_crs_cre_crs B, tb_crs_crs C
		WHERE A.CRS_CRE_CD = B.CRS_CRE_CD 
			AND B.CRS_CD = C.CRS_CD
			AND A.USER_NO = #{userNo}
			AND B.CRS_CRE_CD = #{crsCreCd}
		ORDER BY B.CRS_CRE_NM	;
	</select>
	
	<update id="updateCertStudent" parameterType="studentVO">
			UPDATE 	tb_std_std
		      SET  CERT_STS 		= #{certSts}	
		        ,  CERT_APLC_DTTM 	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')					
		        ,  MOD_NO			= #{modNo}								
		        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		    WHERE  CRS_CRE_CD 		= #{crsCreCd}								
		      AND  STD_NO 			=#{stdNo}								
	</update>
	
	<update id="updateCertStudentByadmin" parameterType="studentVO">
			UPDATE 	tb_std_std
		      SET  CERT_STS 		= #{certSts}	
		        ,  CERT_FAIL_REASON = #{certFailReason}
		        ,  MOD_NO			= #{modNo}								
		        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		    WHERE  STD_NO 		= #{stdNo}								
	</update>
	
	<update id="updateStudentCertPass" parameterType="studentVO">
			UPDATE 	tb_std_std 													
			     SET
			      	   CERT_PASS_YN 		= #{certPassYn}			 						
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			 WHERE  STD_NO 			= #{stdNo}	
	</update>
	
	<delete id="deleteCreateCourseStd" parameterType="studentVO">
		 DELETE FROM tb_std_Std  
  		 WHERE CRS_CRE_CD = #{crsCreCd}
    </delete>
	<update id="updateAddRefund" parameterType="studentVO">
		/*
			수강생 : 환불 요청
		*/
		UPDATE 	tb_std_std 													
			     SET
			     		ENRL_STS		= #{enrlSts}
			      	,  REPAY_STS_CD 	= #{repayStsCd}			 						
			        ,  REPAY_REQ_DTTM	= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  REPAY_BANK_NM	= #{repayBankNm}
			        ,  REPAY_USER_NM    = #{repayUserNm}
			        ,  REPAY_ACNT_NO    = #{repayAcntNo}
			        ,  REPAY_REASON     = #{repayReason} 
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}
	</update>
	
	<update id="updateRefundComplete" parameterType="studentVO">
		/*
			관리자 : 환불 요청 중인 건에 대해 환불 완료 처리
		*/
		UPDATE 	tb_std_std 													
			     SET
			     		ENRL_STS		= #{enrlSts}
			      	,  REPAY_STS_CD 	= #{repayStsCd}			 						
			        ,  REPAY_PRICE		= #{repayPrice}
			        ,  REPAY_DTTM		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
			        ,  REPAY_BANK_NM	= #{repayBankNm}
			        ,  REPAY_USER_NM    = #{repayUserNm}
			        ,  REPAY_ACNT_NO    = #{repayAcntNo}
			        ,  REPAY_MEMO		= #{repayMemo}
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}
	</update>
	
	<update id="updateRefundCancel" parameterType="studentVO">
		/*
			관리자 : 환불 요청 중인 건에 대해 환불 취소 - 수강중으로 변경
		*/
		UPDATE 	tb_std_std 													
			     SET
			     		ENRL_STS		= 'S'
			      	,  REPAY_STS_CD 	= NULL		 						
			        ,  REPAY_PRICE		= NULL
			        ,  REPAY_DTTM		= NULL
			        ,  REPAY_BANK_NM	= NULL
			        ,  REPAY_USER_NM    = NULL
			        ,  REPAY_ACNT_NO    = NULL
			        ,  REPAY_REASON	    = NULL 
			        ,  REPAY_MEMO		= #{repayMemo}
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}
	</update>
	
	<update id="updateRefundMemo" parameterType="studentVO">
		/*
			관리자 : 입력정보, 메모만 변경
		*/
		UPDATE 	tb_std_std 													
			     SET
			     	REPAY_BANK_NM		= #{repayBankNm} 
					,  REPAY_USER_NM	= #{repayUserNm} 
					,  REPAY_ACNT_NO    = #{repayAcntNo} 
			        ,  REPAY_MEMO		= #{repayMemo}
			        ,  MOD_NO 			= #{modNo}									
			        ,  MOD_DTTM 		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')		
			  	 WHERE  STD_NO 			= #{stdNo}
	</update>
	
	<select id="selectForRefundHsty" parameterType="studentVO" resultType="studentVO">
		SELECT 	A.STD_NO
				, A.PAYM_NO
				, A.ENRL_STS
				, A.REPAY_PRICE
				, A.STD_PRICE 
				, A.REPAY_MTHD_CD
				, A.REPAY_STS_CD
				, A.REPAY_REQ_DTTM
				, A.REPAY_DTTM
				, A.REPAY_BANK_NM
				, A.REPAY_USER_NM
				, A.REPAY_ACNT_NO
				, A.REPAY_REASON
				, A.REPAY_MEMO
				, A.REPAY_RSLT_CD
				, (SELECT SUM(STD_PRICE) from tb_std_std WHERE PAYM_NO = A.PAYM_NO ) AS STD_TOT_PRICE
				, (SELECT PAYM_PRICE FROM tb_std_pay_info WHERE PAYM_NO = A.PAYM_NO) AS PAYM_PRICE
		FROM tb_std_std A
		WHERE STD_NO 			= #{stdNo}
	</select>
	
	<insert id="insertStdPayRefundHsty" parameterType="studentVO">
		INSERT INTO	tb_std_pay_refund_hsty
		(
			STD_NO
			, PAYM_NO
			, REFUND_TYPE_CD
			, ENRL_STS
			, REPAY_PRICE
			, STD_PRICE 
			, REPAY_MTHD_CD
			, REPAY_STS_CD
			, REPAY_REQ_DTTM
			, REPAY_DTTM
			, REPAY_BANK_NM
			, REPAY_USER_NM
			, REPAY_ACNT_NO
			, REPAY_REASON
			, REPAY_MEMO
			, REPAY_RSLT_CD
			, REG_NO
			, REG_DTTM
		)
		VALUES(
			#{stdNo}
			, #{paymNo       }
			, #{refundTypeCd }
			, #{enrlSts      }
			, #{repayPrice   }
			, #{stdPrice	 }
			, #{repayMthdCd  }
			, #{repayStsCd   }
			, #{repayReqDttm }
			, #{repayDttm    }
			, #{repayBankNm  }
			, #{repayUserNm  }
			, #{repayAcntNo  }
			, #{repayReason  }
			, #{repayMemo    }
			, #{repayRsltCd  }
			, #{regNo        }
			, DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		)
	</insert>
	
	<sql id="selectStdPayRefundHstyColumn">
		SELECT 	A.SEQ
				, A.STD_NO
				, A.PAYM_NO
				, A.ENRL_STS
				, A.REPAY_PRICE
				, A.STD_PRICE
				, A.REPAY_MTHD_CD
				, A.REPAY_STS_CD
				, A.REPAY_REQ_DTTM
				, A.REPAY_DTTM
				, A.REPAY_BANK_NM
				, A.REPAY_USER_NM
				, A.REPAY_ACNT_NO
				, A.REPAY_REASON
				, A.REPAY_MEMO
				, A.REPAY_RSLT_CD
				, A.RE_REPAY_REASON
				, A.REG_NO
				, A.REG_DTTM
				, A.REFUND_TYPE_CD
				, C.CRS_CRE_CD
				, C.CRS_CRE_NM
		
	</sql>
	
	<sql id="selectStdPayRefundHstyFromWhere">
		FROM tb_std_pay_refund_hsty A, tb_std_std B, tb_crs_cre_crs C
		WHERE A.STD_NO = B.STD_NO
		AND B.CRS_CRE_CD = C.CRS_CRE_CD
		AND A.STD_NO 			= #{stdNo}
	</sql>
	
	<select id="listStdPayRefundHsty" parameterType="studentVO" resultType="studentVO">
		<include refid="selectStdPayRefundHstyColumn"/>
		<include refid="selectStdPayRefundHstyFromWhere"/>
		ORDER BY A.SEQ DESC
	</select>
	
	<select id="listStdPayRefundHstyCount" parameterType="studentVO" resultType="studentVO">
		SELECT count(1)
		<include refid="selectStdPayRefundHstyFromWhere"/>
	</select>
	
	<select id="listStdPayRefundHstyPaging" parameterType="studentVO" resultType="studentVO">
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix"/>
		<include refid="selectStdPayRefundHstyColumn"/>
		<include refid="selectStdPayRefundHstyFromWhere"/>
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
		ORDER BY A.SEQ DESC
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix"/>
	</select>
	
</mapper>