<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.edutrack.modules.student.result.service.impl.EduResultMapper">

	<sql id="selectColumnQuery">
			  A.STD_NO
			, A.CRS_CRE_CD
			, ( SELECT CRS_CRE_NM FROM tb_crs_cre_crs WHERE CRS_CRE_CD = A.CRS_CRE_CD ) AS crsCreNm
			, A.USER_NO
			, A.DECLS_NO
			, B.USER_NM
			, C.USER_ID
			, B.EMAIL
			, B.BIRTH
			, B.DEPT_NM
			, A.ENRL_STS
			, A.SCORE_ECLT_YN
			, (SELECT FN_GET_CODE_NAME('ENRL_STS',A.ENRL_STS)) AS ENRL_STS_NM
			, A.EDU_NO
			, CONCAT(DATE_FORMAT(STR_TO_DATE(A.ENRL_START_DTTM,'%Y%m%d%H%i%s'),'%m%d'),'~', DATE_FORMAT(STR_TO_DATE(A.ENRL_END_DTTM,'%Y%m%d%H%i%s'),'%m%d')) AS ENRL_DURATION
			, IFNULL(FN_GET_NULL(D.PRGR_SCORE),0) AS PRGR_SCORE
			, IFNULL(FN_GET_NULL(D.PRGR_RATE),0) AS PRGR_RATE
			, IFNULL(FN_GET_NULL(D.ATTD_SCORE),0) AS ATTD_SCORE
			, IFNULL(FN_GET_NULL(D.EXAM_SCORE),0) AS EXAM_SCORE
			, IFNULL(FN_GET_NULL(D.SEMI_EXAM_SCORE),0) AS SEMI_EXAM_SCORE
			, IFNULL(FN_GET_NULL(D.ASMT_SCORE),0) AS ASMT_SCORE
			, IFNULL(FN_GET_NULL(D.FORUM_SCORE),0) AS FORUM_SCORE
			, IFNULL(FN_GET_NULL(D.PRJT_SCORE),0) AS PRJT_SCORE
			, IFNULL(FN_GET_NULL(D.JOIN_SCORE),0) AS JOIN_SCORE
			, IFNULL(FN_GET_NULL(D.ETC_SCORE),0) AS ETC_SCORE
			, IFNULL(FN_GET_NULL(D.ETC_SCORE_2),0) AS ETC_SCORE_2
			, IFNULL(FN_GET_NULL(D.ETC_SCORE_3),0) AS ETC_SCORE_3
			, IFNULL(FN_GET_NULL(D.ETC_SCORE_4),0) AS ETC_SCORE_4
			, IFNULL(FN_GET_NULL(D.ETC_SCORE_5),0) AS ETC_SCORE_5
			, IFNULL(FN_GET_NULL(D.TOT_SCORE),0) AS TOT_SCORE
			, IFNULL(FN_GET_NULL(D.CONV_SCORE),0) AS CONV_SCORE			
			, (CASE WHEN D.STD_NO = null THEN 'N' ELSe 'Y' END) AS RESULT_YN
			, (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO)) AS TOT_RATIO
			, ROUND((SELECT FN_GET_CRS_STD_BMKTIME(A.CRS_CRE_CD, A.STD_NO))) AS TOT_BMK_TIME
			, A.CPLT_NO
	</sql>

	<sql id="getListStudentQuery">
		SELECT 
		<include refid="selectColumnQuery" />
		FROM tb_std_std A
		LEFT OUTER JOIN
			tb_std_edu_rslt D
		ON A.STD_NO = D.STD_NO		
		, tb_usr_user_info B
		, tb_usr_login C
		WHERE A.USER_NO = B.USER_NO
			AND B.USER_NO = C.USER_NO
			AND A.CRS_CRE_CD = #{crsCreCd}
			AND A.ENRL_STS IN ('S', 'C', 'F')
			AND A.DECLS_NO = (CASE WHEN #{declsNo} is null THEN A.DECLS_NO WHEN #{declsNo} = 0 THEN A.DECLS_NO ELSE #{declsNo} END)
			AND C.USER_STS ='U'
			AND B.USER_NM like CONCAT('%' , IFNULL(#{userNm}, ''),'%')
		<if test = "searchFrom != null and searchFrom != ''"> 
			AND (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO)) >= #{searchFrom}
		</if>
		<if test = "searchTo != null and searchTo != ''"> 
		<![CDATA[
			AND (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO)) < #{searchTo}
			]]>
		</if>
		<if test = "gradeCd != null and gradeCd != ''"> 
			AND SUBSTR(C.USER_ID,-5,1) = #{gradeCd}
		</if>
		<if test = "banCd != null and banCd != ''"> 
			AND SUBSTR(C.USER_ID,-4,2) = #{banCd}
		</if>
		<if test = "enrlSts != null and enrlSts != ''"> 
			AND A.ENRL_STS = #{enrlSts}
		</if>
	</sql>
	
	<sql id="getMergeQuery">
INSERT INTO tb_std_edu_rslt
	(
		              STD_NO												
		           ,  PRGR_SCORE											
		           ,  ATTD_SCORE											
		           ,  EXAM_SCORE	
		           ,  SEMI_EXAM_SCORE											
		           ,  ASMT_SCORE											
		           ,  FORUM_SCORE											
		           ,  PRJT_SCORE											
		           ,  JOIN_SCORE											
		           ,  ETC_SCORE											
		           ,  ETC_SCORE_2											
		           ,  ETC_SCORE_3											
		           ,  ETC_SCORE_4										
		           ,  ETC_SCORE_5										
		           ,  TOT_SCORE											
		           ,  CONV_SCORE											
		           ,  REG_NO												
		           ,  REG_DTTM												
		           ,  MOD_NO												
		           ,  MOD_DTTM	
	)VALUES(
		              #{stdNo}												
		           ,  #{prgrScore}											
		           ,  #{attdScore}											
		           ,  #{examScore}	
		           ,  #{semiExamScore}										
		           ,  #{asmtScore}											
		           ,  #{forumScore}											
		           ,  #{prjtScore}											
		           ,  #{joinScore}											
		           ,  #{etcScore}											
		           ,  #{etcScore2}											
		           ,  #{etcScore3}											
		           ,  #{etcScore4}											
		           ,  #{etcScore5}											
		           ,  #{totScore}											
		           ,  #{convScore}											
		           ,  #{regNo}												
		           , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')					
		           ,  #{modNo}												
		           , DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')				
	)ON DUPLICATE KEY
		UPDATE 
		
					  PRGR_SCORE	= #{prgrScore}									
		           ,  ATTD_SCORE	= #{attdScore}										
		           ,  EXAM_SCORE	= #{examScore}	
		           ,  SEMI_EXAM_SCORE	= #{semiExamScore}									
		           ,  ASMT_SCORE	= #{asmtScore}									
		           ,  FORUM_SCORE	= #{forumScore}								
		           ,  PRJT_SCORE	= #{prjtScore}									
		           ,  JOIN_SCORE	= #{joinScore}									
		           ,  ETC_SCORE		= #{etcScore}								
		           ,  ETC_SCORE_2		= #{etcScore2}								
		           ,  ETC_SCORE_3		= #{etcScore3}								
		           ,  ETC_SCORE_4		= #{etcScore4}								
		           ,  ETC_SCORE_5		= #{etcScore5}								
		           ,  TOT_SCORE		= #{totScore}								
		           ,  CONV_SCORE	= #{convScore}																	
		           ,  MOD_NO			= #{modNo}								
		           ,  MOD_DTTM		= DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
					  																
	</sql>
	
	<sql id="getUpdateStudentQuery">
		 	UPDATE 	tb_std_edu_rslt A											
		      SET  A.PRGR_SCORE 	= #{prgrScore}								
		        ,  A.ATTD_SCORE 	= #{attdScore}								
		        ,  A.EXAM_SCORE 	= #{examScore}	
		        ,  A.SEMI_EXAM_SCORE 	= #{semiExamScore}								
		        ,  A.ASMT_SCORE 	= #{asmtScore}								
		        ,  A.FORUM_SCORE 	= #{forumScore}								
		        ,  A.PRJT_SCORE 	= #{prjtScore}								
		        ,  A.JOIN_SCORE 	= #{joinScore}								
		        ,  A.ETC_SCORE 	= #{etcScore}									
		        ,  A.TOT_SCORE 	= #{totScore}									
		        ,  A.CONV_SCORE 	= #{convScore}								
		        ,  A.MOD_NO 		= #{modNo}									
		        , A.MOD_DTTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		    WHERE  A.SBJ_CD 		= #{sbjCd}									
		      AND  STD_NO 			= #{stdNo}									
	</sql>
	
	<sql id="getListStudentOrderScore">
		<!-- 학습자 목록 조회 쿼리 -->
		 	SELECT 	*																							
		 	  FROM 	(																							
		 			 SELECT  A.STD_NO																			
						  ,  A.CRS_CRE_CD																		
						  ,  A.USER_NO																																					
						  ,  B.USER_NM																			
						  ,  C.USER_ID																			
						  ,  B.EMAIL																			
						  ,  B.BIRTH																			
						  ,  A.ENRL_STS																			
						  ,  (SELECT FN_GET_CODE_NAME('ENRL_STS',A.ENRL_STS)) AS ENRL_STS_NM																							                  
						  ,  IFNULL(FN_GET_NULL(D.PRGR_SCORE),0) AS PRGR_SCORE		
  						  ,  IFNULL(FN_GET_NULL(D.PRGR_RATE),0) AS PRGR_RATE													
						  ,  IFNULL(FN_GET_NULL(D.ASMT_SCORE),0) AS ASMT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.FORUM_SCORE),0) AS FORUM_SCORE												
						  ,  IFNULL(FN_GET_NULL(D.ATTD_SCORE),0) AS ATTD_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.EXAM_SCORE),0) AS EXAM_SCORE	
						  ,  IFNULL(FN_GET_NULL(D.SEMI_EXAM_SCORE),0) AS SEMI_EXAM_SCORE							  												
						  ,  IFNULL(FN_GET_NULL(D.PRJT_SCORE),0) AS PRJT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.JOIN_SCORE),0) AS JOIN_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.ETC_SCORE),0) AS ETC_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.TOT_SCORE),0) AS TOT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.CONV_SCORE),0) AS CONV_SCORE								  
						  , (CASE WHEN D.STD_NO = null THEN 'N' ELSE 'Y' END) AS RESULT_YN									
		   		   FROM  tb_std_std	A, tb_usr_user_info B													
		        		  ,  tb_usr_login C, tb_std_edu_rslt D												
					  WHERE  A.USER_NO 		= B.USER_NO
					  	AND  A.STD_NO 		= D.STD_NO												
					    AND  B.USER_NO 		= C.USER_NO															
					    AND  A.CRS_CRE_CD 	= #{crsCreCd}															
					    AND  A.ENRL_STS IN ('S', 'C', 'F')														
					    AND  C.USER_STS 	='U'																
					    AND  B.USER_NM like CONCAT('%', IFNULL(#{userNm}, ''),'%')											
					    														
		       	) T																							
	</sql>
	
	<sql id="getExelListStudentOrderScore">
		<!-- 학습자 목록 엑셀 조회 쿼리 -->
		 	SELECT 	*																							
		 	  FROM 	(																							
		 			 SELECT  A.STD_NO																			
						  ,  A.CRS_CRE_CD																		
						  ,  A.USER_NO																																					
						  ,  B.USER_NM																			
						  ,  C.USER_ID																			
						  ,  B.EMAIL																			
						  ,  B.BIRTH																			
						  ,  A.ENRL_STS																			
						  ,  (SELECT FN_GET_CODE_NAME('ENRL_STS',A.ENRL_STS)) AS ENRL_STS_NM																							                  
						  ,  IFNULL(FN_GET_NULL(D.PRGR_SCORE),0) AS PRGR_SCORE		
  						  ,  IFNULL(FN_GET_NULL(D.PRGR_RATE),0) AS PRGR_RATE													
						  ,  IFNULL(FN_GET_NULL(D.ASMT_SCORE),0) AS ASMT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.FORUM_SCORE),0) AS FORUM_SCORE												
						  ,  IFNULL(FN_GET_NULL(D.ATTD_SCORE),0) AS ATTD_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.EXAM_SCORE),0) AS EXAM_SCORE	
						  ,  IFNULL(FN_GET_NULL(D.SEMI_EXAM_SCORE),0) AS SEMI_EXAM_SCORE							  												
						  ,  IFNULL(FN_GET_NULL(D.PRJT_SCORE),0) AS PRJT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.JOIN_SCORE),0) AS JOIN_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.ETC_SCORE),0) AS ETC_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.TOT_SCORE),0) AS TOT_SCORE													
						  ,  IFNULL(FN_GET_NULL(D.CONV_SCORE),0) AS CONV_SCORE
						  ,	 C.USER_STS							
		   		   		FROM  tb_std_std	A
		   		   			INNER JOIN tb_usr_user_info B
		   		   			ON A.USER_NO 		= B.USER_NO	
		   		   			INNER JOIN tb_usr_login C
		   		   			ON B.USER_NO 		= C.USER_NO														
			        		LEFT JOIN tb_std_edu_rslt D
			        		ON A.STD_NO 		= D.STD_NO												    														
		       			) T														
					    WHERE  T.CRS_CRE_CD 	= #{crsCreCd}															
					    AND    T.ENRL_STS IN ('S', 'C', 'F')														
					    AND    T.USER_STS 	='U'																
					    AND    T.USER_NM like CONCAT('%', IFNULL(#{userNm}, ''),'%')																							
	</sql>

	<select id="count" parameterType="eduResultVO" resultType="Integer">
	  	SELECT 
	  		COUNT(*)
		FROM tb_std_std A
		LEFT OUTER JOIN
			tb_std_edu_rslt D
		ON A.STD_NO = D.STD_NO		
		, tb_usr_user_info B
		, tb_usr_login C
		WHERE A.USER_NO = B.USER_NO
			AND B.USER_NO = C.USER_NO
			AND A.CRS_CRE_CD = #{crsCreCd}
			AND A.ENRL_STS IN ('S', 'C', 'F')
			AND A.DECLS_NO = (CASE WHEN #{declsNo} is null THEN A.DECLS_NO WHEN #{declsNo} = 0 THEN A.DECLS_NO ELSE #{declsNo} END)
			AND C.USER_STS ='U'
			AND B.USER_NM like CONCAT('%',IFNULL(#{userNm}, ''),'%')
			
		<if test = "searchFrom != null and searchFrom != ''"> 
			AND (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO)) >= #{searchFrom}
		</if>
		<if test = "searchTo != null and searchTo != ''"> 
		<![CDATA[
			AND (SELECT FN_GET_CRS_STD_PRGR(A.CRS_CRE_CD, A.STD_NO)) < #{searchTo}
			]]>
		</if>
		<if test = "gradeCd != null and gradeCd != ''"> 
			AND SUBSTR(C.USER_ID,-5,1) = #{gradeCd}
		</if>
		<if test = "banCd != null and banCd != ''"> 
			AND SUBSTR(C.USER_ID,-4,2) = #{banCd}
		</if>
	</select>
	
	<select id="listResult" parameterType="eduResultVO" resultType="eduResultVO">
		<!--학습결과 목록 조회 (전체) -->
		<include refid="getListStudentQuery" />
		<choose>
			<when test="sortKey != null and sortKey == 'EDU_NO_ASC'">
				ORDER BY A.EDU_NO ASC
			</when>
			<when test="sortKey != null and sortKey == 'EDU_NO_DESC'">
				ORDER BY A.EDU_NO DESC
			</when>
			<when test="sortKey != null and sortKey == 'DECLS_NO_ASC'">
				ORDER BY A.DECLS_NO ASC
			</when>
			<when test="sortKey != null and sortKey == 'DECLS_NO_DESC'">
				ORDER BY A.DECLS_NO DESC
			</when>
			<when test="sortKey != null and sortKey == 'USER_NM_ASC'">
				ORDER BY B.USER_NM ASC
			</when>
			<when test="sortKey != null and sortKey == 'USER_NM_DESC'">
				ORDER BY B.USER_NM DESC
			</when>
			<when test="sortKey != null and sortKey == 'USER_ID_ASC'">
				ORDER BY C.USER_ID ASC
			</when>
			<when test="sortKey != null and sortKey == 'USER_ID_DESC'">
				ORDER BY C.USER_ID DESC
			</when>
			<when test="sortKey != null and sortKey == 'TOT_RATIO_ASC'">
				ORDER BY TOT_RATIO ASC
			</when>
			<when test="sortKey != null and sortKey == 'TOT_RATIO_DESC'">
				ORDER BY TOT_RATIO DESC
			</when>
			<otherwise>
				ORDER BY A.EDU_NO, C.USER_ID
			</otherwise>
		</choose>
	</select>

	<select id="listResultPaging" parameterType="eduResultVO" resultType="eduResultVO">
		<!-- 학습결과 목록 조회 (페이징) -->
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix" />
		<include refid="getListStudentQuery" />
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
		<choose>
			<when test="sortKey != null and sortKey == 'EDU_NO_ASC'">
				ORDER BY EDU_NO ASC
			</when>
			<when test="sortKey != null and sortKey == 'EDU_NO_DESC'">
				ORDER BY EDU_NO DESC
			</when>
			<when test="sortKey != null and sortKey == 'DECLS_NO_ASC'">
				ORDER BY DECLS_NO ASC
			</when>
			<when test="sortKey != null and sortKey == 'DECLS_NO_DESC'">
				ORDER BY DECLS_NO DESC
			</when>
			<when test="sortKey != null and sortKey == 'USER_NM_ASC'">
				ORDER BY USER_NM ASC
			</when>
			<when test="sortKey != null and sortKey == 'USER_NM_DESC'">
				ORDER BY USER_NM DESC
			</when>
			<when test="sortKey != null and sortKey == 'USER_ID_ASC'">
				ORDER BY USER_ID ASC
			</when>
			<when test="sortKey != null and sortKey == 'USER_ID_DESC'">
				ORDER BY USER_ID DESC
			</when>
			<when test="sortKey != null and sortKey == 'TOT_RATIO_ASC'">
				ORDER BY TOT_RATIO ASC
			</when>
			<when test="sortKey != null and sortKey == 'TOT_RATIO_DESC'">
				ORDER BY TOT_RATIO DESC
			</when>
			<otherwise>
				ORDER BY EDU_NO, USER_ID
			</otherwise>
		</choose>
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix" />	
	</select>

	<select id="selectResult" parameterType="eduResultVO" resultType="eduResultVO">
	<!-- 학습결과 정보 조회 -->
		 	SELECT  A.STD_NO													
		        ,  A.PRGR_SCORE	
		        ,  A.PRGR_RATE											
		        ,  A.ATTD_SCORE												
		        ,  A.EXAM_SCORE			
		        ,  A.SEMI_EXAM_SCORE			        									
		        ,  A.ASMT_SCORE												
		        ,  A.FORUM_SCORE												
		        ,  A.PRJT_SCORE												
		        ,  A.JOIN_SCORE												
		        ,  A.ETC_SCORE													
		        ,  A.TOT_SCORE													
		        ,  A.CONV_SCORE												
		        ,  A.REG_NO													
		        ,  A.REG_DTTM													
		        ,  A.MOD_NO													
		        ,  A.MOD_DTTM													
			    ,  (SELECT FN_GET_USER_NAME(A.MOD_NO)) AS MOD_NM		
			    ,  (SELECT FN_GET_USER_NAME(A.REG_NO)) AS REG_NM
			    ,  C.USER_NM	
		     FROM  tb_std_edu_rslt A, tb_std_std B, tb_usr_user_info C									
		    WHERE  A.STD_NO = #{stdNo}
		      AND	B.STD_NO = A.STD_NO								
		      AND	B.USER_NO = C.USER_NO
	</select>
	
	<sql id="selectCrmEduResult">
		SELECT     B.CRS_CRE_CD
	 	 		 , B.CRS_CRE_NM
	 	 		 , C.CRS_YEAR
	 	 		 , B.CRE_TERM 
	 	 		 , A.ENRL_STS
	 	 		 , A.STD_NO 
	 	 		 , IFNULL(FN_GET_NULL(D.PRGR_SCORE),0) AS PRGR_SCORE	
 	 	 		 , IFNULL(FN_GET_NULL(D.PRGR_RATE),0) AS PRGR_RATE											
		         , IFNULL(FN_GET_NULL(D.ATTD_SCORE),0) AS ATTD_SCORE											
		    	 , IFNULL(FN_GET_NULL(D.EXAM_SCORE),0) AS EXAM_SCORE			
		    	 , IFNULL(FN_GET_NULL(D.SEMI_EXAM_SCORE),0)	AS SEMI_EXAM_SCORE		        									
		     	 , IFNULL(FN_GET_NULL(D.ASMT_SCORE),0) AS ASMT_SCORE												
		    	 , IFNULL(FN_GET_NULL(D.FORUM_SCORE),0)	AS FORUM_SCORE											
		     	 , IFNULL(FN_GET_NULL(D.PRJT_SCORE),0) AS PRJT_SCORE												
		     	 , IFNULL(FN_GET_NULL(D.JOIN_SCORE),0) AS JOIN_SCORE												
		     	 , IFNULL(FN_GET_NULL(D.ETC_SCORE),0) AS ETC_SCORE													
		     	 , IFNULL(FN_GET_NULL(D.TOT_SCORE),0) AS TOT_SCORE
		     	 , A.ENRL_APLC_DTTM		
		 FROM tb_std_std A, tb_crs_cre_crs B, tb_crs_crs C, tb_std_edu_rslt D 							
		 WHERE A.CRS_CRE_CD = B.CRS_CRE_CD
		 AND B.CRS_CD = C.CRS_CD
		 AND A.STD_NO = D.STD_NO 
		 AND A.USER_NO = #{userNo}
	</sql>
	
	<select id="listCrmEduResultPaging" parameterType="eduResultVO" resultType="eduResultVO">
		<!-- 학습결과 목록 조회 (페이징) -->
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pagePrefix" />
		<include refid="selectCrmEduResult" />
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageRnumfix"/>
		ORDER BY ENRL_APLC_DTTM DESC
		<include refid="egovframework.edutrack.comm.service.impl.CommonMapper.pageSubfix" />	
	</select>
	
	<select id="countCrmEduResult" parameterType="eduResultVO" resultType="Integer">
		<include refid="countCrmEduResultQuery"/>
	</select>		
	
	<sql id="countCrmEduResultQuery">
		<![CDATA[
		SELECT COUNT(*)
         FROM tb_std_std A, tb_crs_cre_crs B, tb_crs_crs C, tb_std_edu_rslt D 							
		 WHERE A.CRS_CRE_CD = B.CRS_CRE_CD
		 AND B.CRS_CD = C.CRS_CD
		 AND A.STD_NO = D.STD_NO 
		 AND A.USER_NO = #{userNo}
		]]>
	</sql>	

	<insert id="insertResult" parameterType="eduResultVO">
		<include refid="getMergeQuery" />
	</insert>

	<update id="updateResult" parameterType="eduResultVO">
		<!-- 학습결과 수정 -->
		<include refid="getUpdateStudentQuery" />
	</update>
	
	<select id="listStudentScore" parameterType="eduResultVO" resultType="eduResultVO">
		<!-- 수강생 수료 처리를 위한 수강생 목록 조회 -->
		<include refid="getListStudentOrderScore" />
	</select>

	<select id="listExelStudentScore" parameterType="eduResultVO" resultType="eduResultVO">
		<!-- 수강생 수료 처리를 위한 수강생 목록 조회 > 강의실 엑셀-->
		<include refid="getExelListStudentOrderScore" />
	</select>
	
	<update id="insertEduResultSp" statementType="CALLABLE" parameterType="eduResultVO">
		{call SP_AUTO_SCORE_STD( #{crsCreCd}, #{sbjCd}, #{stdNo} ) }
	</update>
	
	<update id="insertEduResultCrsSp" statementType="CALLABLE" parameterType="eduResultVO">
		{call SP_AUTO_SCORE_CRS( #{crsCreCd} ) }
	</update>
	
	<update id="getInsertEduResult" statementType="CALLABLE" parameterType="eduResultVO">
		{call SP_INSERT_EDU_RESULT( #{crsCreCd} ,#{stdNo}) }
	</update>
	
	<update id="autoInserteduRslt" parameterType="eduResultVO">
		{call SP_INSERT_EDU_RESULT( #{crsCreCd} ,#{stdNo}) }
	</update>

</mapper>